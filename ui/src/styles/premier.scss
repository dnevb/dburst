/* CSS component styles here */

/* alpha */

:root {
  --actionListContent-paddingBlock: var(
    --control-medium-paddingBlock,
    0.375rem
  );
}

/* autocomplete */

/* This file can be deprecated when AutoComplete is upstreamed to PVC + rolled out to dotcom https://github.com/github/primer/issues/796
** AutoComplete relies on FormControl, Overlay and ActionList CSS */

/* Stacked label (default) */

.autocomplete-label-stacked {
  display: block;
  margin-bottom: 6px;
}

/* Inline label (non-default) */

.autocomplete-label-inline {
  display: inline;
  margin-right: 6px;
}

/* Switch to stacked at smaller viewport */

@media (max-width: 543.98px) {
  .autocomplete-label-inline {
    display: block;
    margin-bottom: 6px;
  }
}

/* Wrapper for the input and result elements to ensure alignment */

.autocomplete-body {
  position: relative;
  display: inline;
}

/* Wrapper and conditional styles for when an icon is added */

.autocomplete-embedded-icon-wrap {
  display: inline-flex;
  padding: 4px 8px;
  align-items: center;
}

.autocomplete-embedded-icon-wrap:focus-within {
  border-color: var(
    --borderColor-accent-emphasis,
    var(--color-accent-emphasis)
  );

  border-color: var(--focus-outlineColor, var(--color-accent-fg));

  outline: none;

  box-shadow: inset 0 0 0 1px
    var(--focus-outlineColor, var(--color-accent-fg));
}

.autocomplete-embedded-icon-wrap .form-control {
  padding: 0;
  margin-left: 8px;
  border: none;
  box-shadow: none;
}

.autocomplete-embedded-icon-wrap .form-control:focus {
  box-shadow: none;
}

.autocomplete-embedded-icon-wrap .form-control:focus-visible {
  box-shadow: none;
}

/* A pop up list of items used to show autocompleted results */

.autocomplete-results {
  position: absolute;
  left: 0;
  z-index: 99;
  width: max-content;
  min-width: 100%;
  max-height: 20em;
  overflow-y: auto;
  font-size: 13px;
  list-style: none;
  background: var(--overlay-bgColor, var(--color-canvas-overlay));
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));
  border-radius: var(--borderRadius-medium, 0.375rem);
  box-shadow: var(
    --shadow-resting-medium,
    var(--color-shadow-medium)
  );
}

/* One of the items that appears within an autocomplete group
** Bold black text on white background */

.autocomplete-item {
  display: block;
  width: 100%;
  padding: 4px 8px;
  overflow: hidden;
  font-weight: var(--base-text-weight-semibold, 600);
  color: var(--fgColor-default, var(--color-fg-default));
  text-align: left;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  cursor: pointer;
  background-color: var(
    --overlay-bgColor,
    var(--color-canvas-overlay)
  );
  border: 0;
}

.autocomplete-item:hover {
  color: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: var(
    --bgColor-accent-emphasis,
    var(--color-accent-emphasis)
  );

  /* Inherit color on all child elements to ensure enough contrast */
}

.autocomplete-item:hover * {
  color: inherit !important;
}

.autocomplete-item.selected,
.autocomplete-item[aria-selected='true'],
.autocomplete-item.navigation-focus {
  color: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: var(
    --bgColor-accent-emphasis,
    var(--color-accent-emphasis)
  );

  /* Inherit color on all child elements to ensure enough contrast */
}

.autocomplete-item.selected *,
.autocomplete-item[aria-selected='true'] *,
.autocomplete-item.navigation-focus * {
  color: inherit !important;
}

/* Banner alert */

.Banner {
  position: relative;
  display: grid;
  padding: var(--base-size-8, 0.5rem);
  color: var(--fgColor-default, var(--color-fg-default));
  background-image: linear-gradient(
    var(--bgColor-accent-muted, var(--color-accent-subtle)),
    var(--bgColor-accent-muted, var(--color-accent-subtle))
  );
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-accent-muted, var(--color-accent-muted));
  border-radius: var(--borderRadius-medium, 0.375rem);
  grid-auto-flow: column;
  grid-template-areas: 'visual message actions close';
  grid-template-columns: min-content 1fr minmax(0, auto) min-content;
  grid-template-rows: min-content;

  /* `sm` breakpoint variantion */
}

@media (max-width: 543.98px) {
  .Banner {
    grid-template-areas:
      'visual message close'
      '. actions actions';
    grid-template-columns: min-content 1fr min-content;
    grid-template-rows: min-content min-content;
  }

  .Banner .Banner-actions {
    margin: var(--base-size-8, 0.5rem) 0 0 var(--base-size-8, 0.5rem);
  }
}

/* Elements */

.Banner .Banner-visual {
  display: grid;
  padding: 0.375rem var(--base-size-8, 0.5rem);
  grid-area: visual;
  align-self: start;
}

.Banner .Banner-visual > .octicon {
  margin-block: calc(var(--base-size-4, 0.25rem) / 2);
}

.Banner .Banner-visual > * {
  align-self: center;
}

.Banner .Banner-message {
  padding: 0.375rem var(--base-size-8, 0.5rem);
  grid-area: message;
  align-self: center;
}

.Banner .Banner-message p:last-child {
  margin-bottom: 0;
}

.Banner .Banner-message .Banner-title:not(:only-child) {
  margin-bottom: 0;
  font-weight: var(--base-text-weight-semibold, 600);
}

.Banner .Banner-actions {
  grid-area: actions;
}

.Banner .Banner-actions:last-child {
  align-self: center;
}

/* is this used anywhere? could not find any use, but unsure */

.Banner .Banner-close {
  grid-area: close;
  margin-left: var(--controlStack-medium-gap-condensed, 0.5rem);
}

.Banner .Banner-visual .octicon {
  color: var(--fgColor-accent, var(--color-accent-fg));
}

.Banner.Banner--warning {
  color: var(--fgColor-default, var(--color-fg-default));
  background-image: linear-gradient(
    var(--bgColor-attention-muted, var(--color-attention-subtle)),
    var(--bgColor-attention-muted, var(--color-attention-subtle))
  );
  border-color: var(
    --borderColor-attention-muted,
    var(--color-attention-muted)
  );
}

.Banner.Banner--warning .Banner-visual .octicon {
  color: var(--fgColor-attention, var(--color-attention-fg));
}

.Banner.Banner--error {
  color: var(--fgColor-default, var(--color-fg-default));
  background-image: linear-gradient(
    var(--bgColor-danger-muted, var(--color-danger-subtle)),
    var(--bgColor-danger-muted, var(--color-danger-subtle))
  );
  border-color: var(
    --borderColor-danger-muted,
    var(--color-danger-muted)
  );
}

.Banner.Banner--error .Banner-visual .octicon {
  color: var(--fgColor-danger, var(--color-danger-fg));
}

.Banner.Banner--success {
  color: var(--fgColor-default, var(--color-fg-default));
  background-image: linear-gradient(
    var(--bgColor-success-muted, var(--color-success-subtle)),
    var(--bgColor-success-muted, var(--color-success-subtle))
  );
  border-color: var(
    --borderColor-success-muted,
    var(--color-success-muted)
  );
}

.Banner.Banner--success .Banner-visual .octicon {
  color: var(--fgColor-success, var(--color-success-fg));
}

/* Full-width */

.Banner.Banner--full {
  margin-top: calc(var(--borderWidth-thin, max(1px, 0.0625rem)) * -1);
  border-right: 0;
  border-left: 0;
  border-radius: 0;
}

@media (max-width: 767.98px) {
  .Banner.Banner--full-whenNarrow {
    margin-top: calc(
      var(--borderWidth-thin, max(1px, 0.0625rem)) * -1
    );
    border-right: 0;
    border-left: 0;
    border-radius: 0;
  }
}

/* dropdown */

.dropdown {
  position: relative;
}

.dropdown-caret {
  display: inline-block;
  width: 0;
  height: 0;
  vertical-align: middle;
  content: '';
  border-style: solid;
  border-width: var(--borderWidth-thicker, max(4px, 0.25rem))
    var(--borderWidth-thicker, max(4px, 0.25rem)) 0;
  border-right-color: transparent;
  border-bottom-color: transparent;
  border-left-color: transparent;
}

/* Requires a positioning class (e.g., `.dropdown-menu-w`) to determine which
** way the menu should render from the element triggering it. */

.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  z-index: 100;
  width: 160px;
  padding-top: var(--control-small-paddingBlock, 0.25rem);
  padding-bottom: var(--control-small-paddingBlock, 0.25rem);
  margin-top: 2px;
  list-style: none;
  background-color: var(
    --overlay-bgColor,
    var(--color-canvas-overlay)
  );
  background-clip: padding-box;
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));
  border-radius: var(--borderRadius-medium, 0.375rem);
  box-shadow: var(--shadow-floating-large, var(--color-shadow-large));
}

.dropdown-menu::before,
.dropdown-menu::after {
  position: absolute;
  display: inline-block;
  content: '';
}

/* caret border */

.dropdown-menu::before {
  border: 8px solid transparent;
  border-bottom-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
}

/* caret background (should match dropdown background) */

.dropdown-menu::after {
  border: 7px solid transparent;
  border-bottom-color: var(
    --overlay-bgColor,
    var(--color-canvas-overlay)
  );
}

.dropdown-menu > ul {
  list-style: none;
}

.dropdown-menu-no-overflow {
  width: auto;
}

.dropdown-menu-no-overflow .dropdown-item {
  padding: var(--control-small-paddingBlock, 0.25rem)
    var(--control-medium-paddingInline-spacious, 1rem);
  overflow: visible;
  text-overflow: inherit;
}

/* Dropdown items (can be links or buttons) */

.dropdown-item {
  display: block;
  padding: var(--control-small-paddingBlock, 0.25rem)
    var(--control-medium-paddingInline-condensed, 0.5rem)
    var(--control-small-paddingBlock, 0.25rem)
    var(--control-medium-paddingInline-spacious, 1rem);
  overflow: hidden;
  color: var(--fgColor-default, var(--color-fg-default));
  text-overflow: ellipsis;
  white-space: nowrap;
}

.dropdown-item:hover {
  color: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: var(
    --bgColor-accent-emphasis,
    var(--color-accent-emphasis)
  );
}

.dropdown-item:hover > .octicon {
  color: inherit;
  opacity: 1;
}

.dropdown-item:hover [class*='color-fg-'] {
  color: inherit !important;
}

.dropdown-item:hover > .Label {
  color: inherit !important;
  border-color: currentcolor;
}

.dropdown-item.btn-link {
  width: 100%;
  text-align: left;
}

.dropdown-signout {
  width: 100%;
  text-align: left;
  background: none;
  border: 0;
}

.dropdown-divider {
  display: block;
  height: 0;
  margin: var(--stack-gap-condensed, 0.5rem) 0;
  border-top: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));
}

.dropdown-header {
  padding: var(--control-small-paddingBlock, 0.25rem)
    var(--control-medium-paddingInline-spacious, 1rem);
  font-size: var(--text-body-size-small, 0.75rem);
  color: var(--fgColor-muted, var(--color-fg-muted));
}

.dropdown-item[aria-checked='false'] .octicon-check {
  display: none;
}

/* Directional classes
**
** Move the menu and the caret attached to it. Requires at least one of these on
** the `.dropdown-menu` element. */

.dropdown-menu-w {
  top: 0;
  right: 100%;
  left: auto;
  width: auto;
  margin-top: 0;
  margin-right: 8px;
}

.dropdown-menu-w::before {
  top: 10px;
  right: -16px;
  left: auto;
  border-color: transparent;
  border-left-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
}

.dropdown-menu-w::after {
  top: 11px;
  right: -14px;
  left: auto;
  border-color: transparent;
  border-left-color: var(
    --overlay-bgColor,
    var(--color-canvas-overlay)
  );
}

.dropdown-menu-e {
  top: 0;
  left: 100%;
  width: auto;
  margin-top: 0;
  margin-left: 8px;
}

.dropdown-menu-e::before {
  top: 10px;
  left: -16px;
  border-color: transparent;
  border-right-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
}

.dropdown-menu-e::after {
  top: 11px;
  left: -14px;
  border-color: transparent;
  border-right-color: var(
    --overlay-bgColor,
    var(--color-canvas-overlay)
  );
}

.dropdown-menu-ne {
  top: auto;
  bottom: 100%;
  left: 0;
  margin-bottom: 3px;
}

.dropdown-menu-ne::before,
.dropdown-menu-ne::after {
  top: auto;
  right: auto;
}

.dropdown-menu-ne::before {
  bottom: -8px;
  left: 9px;
  border-top: 8px solid
    var(--borderColor-default, var(--color-border-default));
  border-right: 8px solid transparent;
  border-bottom: 0;
  border-left: 8px solid transparent;
}

.dropdown-menu-ne::after {
  bottom: -7px;
  left: 10px;
  border-top: 7px solid
    var(--overlay-bgColor, var(--color-canvas-overlay));
  border-right: 7px solid transparent;
  border-bottom: 0;
  border-left: 7px solid transparent;
}

.dropdown-menu-s {
  right: 50%;
  left: auto;
  transform: translateX(50%);
}

.dropdown-menu-s::before {
  top: -16px;
  right: 50%;
  transform: translateX(50%);
}

.dropdown-menu-s::after {
  top: -14px;
  right: 50%;
  transform: translateX(50%);
}

.dropdown-menu-sw {
  right: 0;
  left: auto;
}

.dropdown-menu-sw::before {
  top: -16px;
  right: 9px;
  left: auto;
}

.dropdown-menu-sw::after {
  top: -14px;
  right: 10px;
  left: auto;
}

.dropdown-menu-se::before {
  top: -16px;
  left: 9px;
}

.dropdown-menu-se::after {
  top: -14px;
  left: 10px;
}

/* Layout */

.Layout {
  display: grid;

  --Layout-sidebar-width: 220px;
  --Layout-gutter: 16px;

  /* Flow as column */

  grid-auto-flow: column;
  grid-template-columns: auto 0 minmax(
      0,
      calc(100% - var(--Layout-sidebar-width) - var(--Layout-gutter))
    ); /* sidebar column, separator, main column */
  grid-gap: var(--Layout-gutter);
}

@media (max-width: calc(544px - 0.02px)) {
  .Layout {
    grid-auto-flow: row;
    grid-template-columns: 1fr !important;
  }
  .Layout .Layout-sidebar,
  .Layout .Layout-divider,
  .Layout .Layout-main {
    width: 100% !important;
    grid-column: 1 !important;
  }
  .Layout.Layout--sidebarPosition-flowRow-start .Layout-sidebar {
    grid-row: 1;
  }

  .Layout.Layout--sidebarPosition-flowRow-start .Layout-main {
    grid-row: 2 / span 2;
  }
  .Layout.Layout--sidebarPosition-flowRow-end .Layout-sidebar {
    grid-row: 2 / span 2;
  }

  .Layout.Layout--sidebarPosition-flowRow-end .Layout-main {
    grid-row: 1;
  }
  .Layout.Layout--sidebarPosition-flowRow-none .Layout-sidebar {
    display: none;
  }
  .Layout.Layout--divided {
    --Layout-gutter: 0;
  }
  .Layout.Layout--divided .Layout-divider {
    height: 1px;
    grid-row: 2;
  }

  .Layout.Layout--divided
    .Layout-divider.Layout-divider--flowRow-hidden {
    display: none;
  }

  .Layout.Layout--divided
    .Layout-divider.Layout-divider--flowRow-shallow {
    height: 8px;
    margin-right: 0;
    background: var(--bgColor-inset, var(--color-canvas-inset));
    border-color: var(
      --borderColor-default,
      var(--color-border-default)
    );
    border-style: solid;
    border-width: var(--borderWidth-thin, max(1px, 0.0625rem)) 0;
  }

  .Layout.Layout--divided .Layout-main {
    grid-row: 3 / span 1;
  }
  .Layout.Layout--divided.Layout--sidebarPosition-flowRow-end
    .Layout-sidebar {
    grid-row: 3 / span 1;
  }

  .Layout.Layout--divided.Layout--sidebarPosition-flowRow-end
    .Layout-main {
    grid-row: 1;
  }
}

@media (max-width: calc(768px - 0.02px)) {
  .Layout.Layout--flowRow-until-md {
    grid-auto-flow: row;
    grid-template-columns: 1fr !important;
  }
  .Layout.Layout--flowRow-until-md .Layout-sidebar,
  .Layout.Layout--flowRow-until-md .Layout-divider,
  .Layout.Layout--flowRow-until-md .Layout-main {
    width: 100% !important;
    grid-column: 1 !important;
  }
  .Layout.Layout--flowRow-until-md.Layout--sidebarPosition-flowRow-start
    .Layout-sidebar {
    grid-row: 1;
  }

  .Layout.Layout--flowRow-until-md.Layout--sidebarPosition-flowRow-start
    .Layout-main {
    grid-row: 2 / span 2;
  }
  .Layout.Layout--flowRow-until-md.Layout--sidebarPosition-flowRow-end
    .Layout-sidebar {
    grid-row: 2 / span 2;
  }

  .Layout.Layout--flowRow-until-md.Layout--sidebarPosition-flowRow-end
    .Layout-main {
    grid-row: 1;
  }
  .Layout.Layout--flowRow-until-md.Layout--sidebarPosition-flowRow-none
    .Layout-sidebar {
    display: none;
  }
  .Layout.Layout--flowRow-until-md.Layout--divided {
    --Layout-gutter: 0;
  }
  .Layout.Layout--flowRow-until-md.Layout--divided .Layout-divider {
    height: 1px;
    grid-row: 2;
  }

  .Layout.Layout--flowRow-until-md.Layout--divided
    .Layout-divider.Layout-divider--flowRow-hidden {
    display: none;
  }

  .Layout.Layout--flowRow-until-md.Layout--divided
    .Layout-divider.Layout-divider--flowRow-shallow {
    height: 8px;
    margin-right: 0;
    background: var(--bgColor-inset, var(--color-canvas-inset));
    border-color: var(
      --borderColor-default,
      var(--color-border-default)
    );
    border-style: solid;
    border-width: var(--borderWidth-thin, max(1px, 0.0625rem)) 0;
  }

  .Layout.Layout--flowRow-until-md.Layout--divided .Layout-main {
    grid-row: 3 / span 1;
  }
  .Layout.Layout--flowRow-until-md.Layout--divided.Layout--sidebarPosition-flowRow-end
    .Layout-sidebar {
    grid-row: 3 / span 1;
  }

  .Layout.Layout--flowRow-until-md.Layout--divided.Layout--sidebarPosition-flowRow-end
    .Layout-main {
    grid-row: 1;
  }
}

@media (max-width: calc(1012px - 0.02px)) {
  .Layout.Layout--flowRow-until-lg {
    grid-auto-flow: row;
    grid-template-columns: 1fr !important;
  }
  .Layout.Layout--flowRow-until-lg .Layout-sidebar,
  .Layout.Layout--flowRow-until-lg .Layout-divider,
  .Layout.Layout--flowRow-until-lg .Layout-main {
    width: 100% !important;
    grid-column: 1 !important;
  }
  .Layout.Layout--flowRow-until-lg.Layout--sidebarPosition-flowRow-start
    .Layout-sidebar {
    grid-row: 1;
  }

  .Layout.Layout--flowRow-until-lg.Layout--sidebarPosition-flowRow-start
    .Layout-main {
    grid-row: 2 / span 2;
  }
  .Layout.Layout--flowRow-until-lg.Layout--sidebarPosition-flowRow-end
    .Layout-sidebar {
    grid-row: 2 / span 2;
  }

  .Layout.Layout--flowRow-until-lg.Layout--sidebarPosition-flowRow-end
    .Layout-main {
    grid-row: 1;
  }
  .Layout.Layout--flowRow-until-lg.Layout--sidebarPosition-flowRow-none
    .Layout-sidebar {
    display: none;
  }
  .Layout.Layout--flowRow-until-lg.Layout--divided {
    --Layout-gutter: 0;
  }
  .Layout.Layout--flowRow-until-lg.Layout--divided .Layout-divider {
    height: 1px;
    grid-row: 2;
  }

  .Layout.Layout--flowRow-until-lg.Layout--divided
    .Layout-divider.Layout-divider--flowRow-hidden {
    display: none;
  }

  .Layout.Layout--flowRow-until-lg.Layout--divided
    .Layout-divider.Layout-divider--flowRow-shallow {
    height: 8px;
    margin-right: 0;
    background: var(--bgColor-inset, var(--color-canvas-inset));
    border-color: var(
      --borderColor-default,
      var(--color-border-default)
    );
    border-style: solid;
    border-width: var(--borderWidth-thin, max(1px, 0.0625rem)) 0;
  }

  .Layout.Layout--flowRow-until-lg.Layout--divided .Layout-main {
    grid-row: 3 / span 1;
  }
  .Layout.Layout--flowRow-until-lg.Layout--divided.Layout--sidebarPosition-flowRow-end
    .Layout-sidebar {
    grid-row: 3 / span 1;
  }

  .Layout.Layout--flowRow-until-lg.Layout--divided.Layout--sidebarPosition-flowRow-end
    .Layout-main {
    grid-row: 1;
  }
}

.Layout .Layout-sidebar {
  grid-column: 1;
}

.Layout .Layout-divider {
  display: none;
}

.Layout .Layout-main {
  grid-column: 2 / span 2;
}

/* Gutter spacing */

@media (min-width: 1012px) {
  .Layout {
    --Layout-gutter: 24px;
  }
}

.Layout.Layout--gutter-none {
  /* stylelint-disable-next-line length-zero-no-unit */
  --Layout-gutter: 0px; /* Neds px in value */
}

.Layout.Layout--gutter-condensed {
  --Layout-gutter: 16px;
}

@media (min-width: 1012px) {
  .Layout.Layout--gutter-spacious {
    --Layout-gutter: 32px;
  }
}

@media (min-width: 1280px) {
  .Layout.Layout--gutter-spacious {
    --Layout-gutter: 40px;
  }
}

/* Sidebar width */

@media (min-width: 544px) {
  .Layout {
    --Layout-sidebar-width: 220px;
  }
}

@media (min-width: 768px) {
  .Layout {
    --Layout-sidebar-width: 256px;
  }
}

@media (min-width: 1012px) {
  .Layout {
    --Layout-sidebar-width: 296px;
  }
}

@media (min-width: 768px) {
  .Layout.Layout--sidebar-narrow {
    --Layout-sidebar-width: 240px;
  }
}

@media (min-width: 1012px) {
  .Layout.Layout--sidebar-narrow {
    --Layout-sidebar-width: 256px;
  }
}

@media (min-width: 1012px) {
  .Layout.Layout--sidebar-wide {
    --Layout-sidebar-width: 320px;
  }
}

@media (min-width: 1280px) {
  .Layout.Layout--sidebar-wide {
    --Layout-sidebar-width: 336px;
  }
}

/* Sidebar position */

.Layout.Layout--sidebarPosition-start .Layout-sidebar {
  grid-column: 1;
}

.Layout.Layout--sidebarPosition-start .Layout-main {
  grid-column: 2 / span 2;
}

.Layout.Layout--sidebarPosition-end {
  grid-template-columns:
    minmax(
      0,
      calc(100% - var(--Layout-sidebar-width) - var(--Layout-gutter))
    )
    0 auto;
}

.Layout.Layout--sidebarPosition-end .Layout-main {
  grid-column: 1;
}

.Layout.Layout--sidebarPosition-end .Layout-sidebar {
  grid-column: 2 / span 2;
}

/* Sidebar divider */

.Layout.Layout--divided .Layout-divider {
  display: block;
  grid-column: 2;
  width: 1px;
  margin-right: -1px;
  background: var(--borderColor-default, var(--color-border-default));
}

.Layout.Layout--divided .Layout-main {
  grid-column: 3 / span 1;
}

.Layout.Layout--divided.Layout--sidebarPosition-end .Layout-sidebar {
  grid-column: 3 / span 1;
}

.Layout.Layout--divided.Layout--sidebarPosition-end .Layout-main {
  grid-column: 1;
}

.Layout-divider {
  display: none;
  width: 1px;
}

.Layout-sidebar {
  width: var(--Layout-sidebar-width);
}

.Layout-main {
  min-width: 0;

  /* Centered main column
  ** FIXME: right-aligned sidebar */
}

.Layout-main .Layout-main-centered-md,
.Layout-main .Layout-main-centered-lg,
.Layout-main .Layout-main-centered-xl {
  margin-right: auto;
  margin-left: auto;
}

.Layout-main .Layout-main-centered-md > .container-md,
.Layout-main .Layout-main-centered-lg > .container-md,
.Layout-main .Layout-main-centered-xl > .container-md,
.Layout-main .Layout-main-centered-md > .container-lg,
.Layout-main .Layout-main-centered-lg > .container-lg,
.Layout-main .Layout-main-centered-xl > .container-lg,
.Layout-main .Layout-main-centered-md > .container-xl,
.Layout-main .Layout-main-centered-lg > .container-xl,
.Layout-main .Layout-main-centered-xl > .container-xl {
  margin-left: 0;
}

.Layout-main .Layout-main-centered-md {
  max-width: calc(
    var(--breakpoint-medium, 48rem) + var(--Layout-sidebar-width) +
      var(--Layout-gutter)
  );
}

.Layout-main .Layout-main-centered-lg {
  max-width: calc(
    var(--breakpoint-large, 63.25rem) + var(--Layout-sidebar-width) +
      var(--Layout-gutter)
  );
}

.Layout-main .Layout-main-centered-xl {
  max-width: calc(
    var(--breakpoint-xlarge, 80rem) + var(--Layout-sidebar-width) +
      var(--Layout-gutter)
  );
}

/* tabnav */

/* Outer wrapper */

.tabnav {
  margin-top: 0;
  margin-bottom: var(--stack-gap-normal, 1rem);
  border-bottom: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));
}

.tabnav-tabs {
  display: flex;
  margin-bottom: calc(
    var(--borderWidth-thin, max(1px, 0.0625rem)) * -1
  );
  overflow: auto;
}

.tabnav-tab {
  display: inline-block;
  flex-shrink: 0;
  padding: var(--base-size-8, 0.5rem)
    var(--control-medium-paddingInline-spacious, 1rem);
  font-size: var(--text-body-size-medium, 0.875rem);
  line-height: 23px;
  color: var(--fgColor-muted, var(--color-fg-muted));
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: transparent;
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    transparent;
  border-bottom: 0;
  transition: color 0.2s cubic-bezier(0.3, 0, 0.5, 1);
}

.tabnav-tab.selected,
.tabnav-tab[aria-selected='true'],
.tabnav-tab[aria-current]:not([aria-current='false']) {
  color: var(--fgColor-default, var(--color-fg-default));
  background-color: var(
    --bgColor-default,
    var(--color-canvas-default)
  ); /* cover bottom border */
  border-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
  border-radius: var(--borderRadius-medium, 0.375rem)
    var(--borderRadius-medium, 0.375rem) 0 0;
}

.tabnav-tab.selected .octicon,
.tabnav-tab[aria-selected='true'] .octicon,
.tabnav-tab[aria-current]:not([aria-current='false']) .octicon {
  color: inherit;
}

.tabnav-tab:hover {
  color: var(--fgColor-default, var(--color-fg-default));
  -webkit-text-decoration: none;
  text-decoration: none;
  transition-duration: 0.1s;
}

.tabnav-tab:focus,
.tabnav-tab:focus-visible {
  border-radius: var(--borderRadius-medium, 0.375rem)
    var(--borderRadius-medium, 0.375rem) 0 0 !important;
  outline-offset: -6px;
}

.tabnav-tab:active {
  color: var(--fgColor-muted, var(--color-fg-muted));
}

.tabnav-tab .octicon {
  margin-right: var(--control-small-gap, 0.25rem);
  color: var(--fgColor-muted, var(--color-fg-muted));
}

.tabnav-tab .Counter {
  margin-left: var(--control-small-gap, 0.25rem);
  color: inherit;
}

/* Tabnav extras
**
** Tabnav extras are non-tab elements that sit in the tabnav. Usually they're
** inline text or links. */

.tabnav-extra {
  display: inline-block;
  padding-top: 10px;
  margin-left: 10px;
  font-size: var(--text-body-size-small, 0.75rem);
  color: var(--fgColor-muted, var(--color-fg-muted));
}

.tabnav-extra > .octicon {
  margin-right: 2px;
}

/* When tabnav-extra are anchors
** stylelint-disable-next-line selector-no-qualifying-type */

a.tabnav-extra:hover {
  color: var(--fgColor-accent, var(--color-accent-fg));
  -webkit-text-decoration: none;
  text-decoration: none;
}

/* Tabnav buttons
**
** For when there are multiple buttons, space them out appropriately. Requires
** the buttons to be floated or inline-block. */

.tabnav-btn {
  margin-left: var(--controlStack-medium-gap-condensed, 0.5rem);
}

.btn-mktg {
  position: relative;
  z-index: 1;
  display: inline-block;

  /* stylelint-disable-next-line primer/spacing */
  padding: 0.9rem 1.5rem 1.1rem;

  /* stylelint-disable-next-line primer/typography */
  font-size: 1rem;
  font-weight: var(--base-text-weight-semibold, 600);
  line-height: 1;
  color: var(--bgColor-default, var(--color-canvas-default));
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  -webkit-user-select: none;
  user-select: none;
  background: linear-gradient(
      180deg,
      rgba(255, 255, 255, 15%) 0%,
      rgba(255, 255, 255, 0%) 100%
    ),
    var(--color-mktg-btn-bg) !important;
  border: 0;

  /* stylelint-disable-next-line primer/borders */
  border-radius: 0.375rem;
  transition:
    box-shadow 0.2s,
    outline 0.2s ease;
  -webkit-appearance: none !important;
  appearance: none !important;
}

.btn-mktg::before {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -1;
  content: '';

  /* stylelint-disable-next-line primer/colors */
  background: linear-gradient(
    180deg,
    rgba(255, 255, 255, 15%) 0%,
    rgba(255, 255, 255, 0%) 100%
  ) !important;
  border-radius: inherit;
  opacity: 0;
  transition: opacity 0.2s;
  background-blend-mode: normal;
}

.btn-mktg:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
  box-shadow: var(--color-mktg-btn-shadow-hover) !important;
}

.btn-mktg:hover::before,
.btn-mktg:focus::before,
.btn-mktg:focus-visible::before,
.btn-mktg.focus::before {
  opacity: 1;
}

/* fallback :focus state */

.btn-mktg:focus {
  outline: 2px solid var(--focus-outlineColor, var(--color-accent-fg));
  outline-offset: 2px;
  box-shadow: none;

  /* remove fallback :focus if :focus-visible is supported */
}

.btn-mktg:focus:not(:focus-visible) {
  outline: solid 1px transparent;
  box-shadow: none;
}

/* default focus state */

.btn-mktg:focus-visible {
  outline: 2px solid var(--focus-outlineColor, var(--color-accent-fg));
  outline-offset: 2px;
  box-shadow: none;
}

.btn-mktg:active::before {
  opacity: 0.5 !important;
}

.btn-mktg.disabled,
.btn-mktg[disabled] {
  pointer-events: none;
  cursor: default;
  opacity: 0.5;
}

.btn-muted-mktg {
  color: var(--fgColor-default, var(--color-fg-default)) !important;
  background: none !important;
  box-shadow: var(--color-mktg-btn-shadow-outline);
}

.btn-muted-mktg::before {
  display: none;
}

.btn-muted-mktg:hover {
  box-shadow: var(--color-mktg-btn-shadow-hover-muted) !important;
}

.btn-muted-mktg:active {
  /* stylelint-disable-next-line primer/box-shadow */
  box-shadow: var(--fgColor-default, var(--color-fg-default)) 0 0 0
    3px inset !important;
}

.btn-muted-mktg:disabled {
  /* stylelint-disable-next-line primer/box-shadow */
  box-shadow: var(--fgColor-default, var(--color-fg-default)) 0 0 0
    1px inset !important;
}

.btn-subtle-mktg {
  color: var(--fgColor-default, var(--color-fg-default)) !important;
  background: none !important;
  box-shadow: none !important;
}

.btn-subtle-mktg::before {
  background: none !important;
}

.btn-subtle-mktg:hover {
  box-shadow: var(--color-mktg-btn-shadow-hover-muted) !important;
}

.btn-signup-mktg {
  /* stylelint-disable-next-line primer/colors */
  color: #fff;

  /* stylelint-disable-next-line primer/colors */
  background: linear-gradient(
      180deg,
      rgba(52, 183, 89, 15%) 0%,
      rgba(46, 164, 79, 0%) 100%
    ),
    rgb(46, 164, 79) !important;
}

.btn-signup-mktg::before {
  /* stylelint-disable-next-line primer/colors */
  background: linear-gradient(
    180deg,
    rgba(52, 183, 89, 15%) 0%,
    rgba(46, 164, 79, 0%) 100%
  ) !important;
}

/* fallback :focus state */

.btn-signup-mktg:focus {
  outline: 2px solid var(--focus-outlineColor, var(--color-accent-fg));
  outline-offset: 2px;
  box-shadow: none;

  /* remove fallback :focus if :focus-visible is supported */
}

.btn-signup-mktg:focus:not(:focus-visible) {
  outline: solid 1px transparent;
  box-shadow: none;
}

/* default focus state */

.btn-signup-mktg:focus-visible {
  outline: 2px solid var(--focus-outlineColor, var(--color-accent-fg));
  outline-offset: 2px;
  box-shadow: none;
}

/* Size modifiers */

.btn-small-mktg {
  /* stylelint-disable-next-line primer/spacing */
  padding: 0.625rem 1rem 0.8125rem;
}

.btn-large-mktg {
  /* stylelint-disable-next-line primer/spacing */
  padding: 16px 30px 20px !important;

  /* stylelint-disable-next-line primer/typography */
  font-size: 1.25rem;
}

/* ToggleSwitch */

/* Catalyst in dotcom applies a display: block to all web component elements. This
** rule overrides it so the status label and toggle switch are laid out correctly. */

.ToggleSwitch.ToggleSwitch {
  display: inline-flex;
}

.ToggleSwitch {
  align-items: center;
  display: inline-flex;
  gap: var(--controlStack-medium-gap-condensed, 0.5rem);
}

.ToggleSwitch--checked .ToggleSwitch-statusOn {
  height: auto;
  visibility: visible;
}

.ToggleSwitch--checked .ToggleSwitch-statusOff {
  height: 0;
  visibility: hidden;
}

.ToggleSwitch-track {
  position: relative;
  display: block;
  width: var(--base-size-64, 4rem);
  height: var(--control-medium-size, 2rem);
  padding: 0;
  overflow: hidden;
  -webkit-text-decoration: none;
  text-decoration: none;
  cursor: pointer;
  -webkit-user-select: none;
  user-select: none;
  background-color: var(
    --controlTrack-bgColor-rest,
    var(--color-switch-track-bg)
  );
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(
      --controlTrack-borderColor-rest,
      var(--color-switch-track-border)
    );
  border-radius: var(--borderRadius-medium, 0.375rem);
  transition-timing-function: cubic-bezier(0.5, 1, 0.89, 1);
  transition-duration: 80ms;
  transition-property: background-color, border-color;
  -webkit-appearance: none;
  appearance: none;
}

.ToggleSwitch-track:focus,
.ToggleSwitch-track:focus-visible {
  outline-offset: 1px;
}

.ToggleSwitch-track:hover {
  background-color: var(
    --controlTrack-bgColor-hover,
    var(--color-switch-track-hover-bg)
  );
}

.ToggleSwitch-track:active {
  background-color: var(
    --controlTrack-bgColor-active,
    var(--color-switch-track-active-bg)
  );
}

@media (pointer: coarse) {
  .ToggleSwitch-track::before {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 100%;
    min-height: 44px;
    content: '';
    transform: translateX(-50%) translateY(-50%);
  }
}

@media (prefers-reduced-motion) {
  .ToggleSwitch-track {
    transition: none;
  }

  .ToggleSwitch-track * {
    transition: none;
  }
}

.ToggleSwitch-track[aria-pressed='true'][disabled] {
  background-color: var(
    --controlTrack-bgColor-disabled,
    var(--color-switch-track-disabled-bg)
  );
  color: var(
    --control-checked-fgColor-disabled,
    var(--color-switch-track-checked-disabled-fg)
  );
  border-color: transparent;
}

.ToggleSwitch-track[aria-pressed='true'] {
  background-color: var(
    --control-checked-bgColor-rest,
    var(--color-switch-track-checked-bg)
  );
  border-color: var(--borderColor-transparent, transparent);
}

.ToggleSwitch-track[aria-pressed='true']:not([disabled]):hover {
  background-color: var(
    --control-checked-bgColor-hover,
    var(--color-switch-track-checked-hover-bg)
  );
}

.ToggleSwitch-track[aria-pressed='true']:not([disabled]):active {
  background-color: var(
    --control-checked-bgColor-active,
    var(--color-switch-track-checked-active-bg)
  );
}

.ToggleSwitch-track[aria-pressed='true'] .ToggleSwitch-knob {
  background-color: var(
    --controlKnob-bgColor-checked,
    var(--color-switch-knob-checked-bg)
  );
  border-color: var(
    --controlKnob-borderColor-checked,
    var(--color-switch-knob-checked-border)
  );
  transform: translateX(100%);
}

.ToggleSwitch-track[aria-pressed='true'] .ToggleSwitch-lineIcon {
  transform: translateX(0%);
}

.ToggleSwitch-track[aria-pressed='true'] .ToggleSwitch-circleIcon {
  transform: translateX(100%);
}

.ToggleSwitch-track[disabled] {
  cursor: not-allowed;
  background-color: var(
    --controlTrack-bgColor-disabled,
    var(--color-switch-track-disabled-bg)
  );
  border-color: transparent;
  transition-property: none;
}

.ToggleSwitch-track[disabled] .ToggleSwitch-knob {
  border-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
  box-shadow: none;
}

.ToggleSwitch-track[disabled] .ToggleSwitch-lineIcon {
  color: var(
    --controlTrack-fgColor-disabled,
    var(--color-switch-track-disabled-fg)
  );
}

.ToggleSwitch-track[disabled] .ToggleSwitch-circleIcon {
  color: var(
    --controlTrack-fgColor-disabled,
    var(--color-switch-track-disabled-fg)
  );
}

.ToggleSwitch-icons {
  display: flex;
  align-items: center;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.ToggleSwitch-lineIcon {
  line-height: 0;
  color: var(
    --control-checked-fgColor-rest,
    var(--color-switch-track-checked-fg)
  );
  transition-duration: 80ms;
  transition-property: transform;
  transform: translateX(-100%);
  flex: 1 0 50%;
}

.ToggleSwitch-circleIcon {
  line-height: 0;
  color: var(
    --controlTrack-fgColor-rest,
    var(--color-switch-track-fg)
  );
  transition-duration: 80ms;
  transition-property: transform;
  transform: translateX(0);
  flex: 1 0 50%;
}

.ToggleSwitch-knob {
  position: absolute;
  top: 0;
  bottom: 0;
  z-index: 1;
  width: 50%;
  background-color: var(
    --controlKnob-bgColor-rest,
    var(--color-switch-knob-bg)
  );
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(
      --controlKnob-borderColor-rest,
      var(--color-switch-knob-border)
    );
  border-radius: var(--borderRadius-medium, 0.375rem);
  box-shadow: var(--shadow-resting-medium, var(--color-shadow-medium)),
    var(--button-default-shadow-inset, var(--color-btn-inset-shadow));
  transition-timing-function: cubic-bezier(0.5, 1, 0.89, 1);
  transition-duration: 80ms;
  transition-property: transform;
}

@media (prefers-reduced-motion) {
  .ToggleSwitch-knob {
    transition: none;
  }
}

.ToggleSwitch-status {
  position: relative;
  font-size: var(--text-body-size-medium, 0.875rem);
  line-height: 1.5;
  color: var(--fgColor-default, var(--color-fg-default));
  text-align: right;
}

.ToggleSwitch-statusIcon {
  width: var(--base-size-16, 1rem);
  display: flex;
  margin-top: 0.063rem;
}

.ToggleSwitch--small .ToggleSwitch-status {
  font-size: var(--text-body-size-small, 0.75rem);
}

.ToggleSwitch--small .ToggleSwitch-track {
  width: var(--base-size-48, 3rem);
  height: var(--control-xsmall-size, 1.5rem);
}

.ToggleSwitch--disabled .ToggleSwitch-status {
  color: var(--fgColor-muted, var(--color-fg-muted));
}

.ToggleSwitch-statusOn {
  height: 0;
  visibility: hidden;
}

.ToggleSwitch-statusOff {
  height: auto;
  visibility: visible;
}

.ToggleSwitch--statusAtEnd {
  flex-direction: row-reverse;
}

.ToggleSwitch--statusAtEnd .ToggleSwitch-status {
  text-align: left;
}

/* UnderlineNav */

.UnderlineNav {
  display: flex;
  min-height: var(--base-size-48, 3rem);
  overflow-x: auto;
  overflow-y: hidden;
  box-shadow: inset 0 -1px 0 var(--borderColor-muted, var(--color-border-muted));
  -webkit-overflow-scrolling: auto;
  justify-content: space-between;
}

.UnderlineNav .Counter {
  margin-left: var(--control-medium-gap, 0.5rem);
  color: var(--fgColor-default, var(--color-fg-default));
  background-color: var(
    --bgColor-neutral-muted,
    var(--color-neutral-muted)
  );
}

.UnderlineNav .Counter--primary {
  color: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  background-color: var(
    --bgColor-neutral-emphasis,
    var(--color-fg-subtle)
  );
}

.UnderlineNav-body {
  display: flex;
  align-items: center;
  gap: var(--control-medium-gap, 0.5rem);
  list-style: none;
}

.UnderlineNav-item {
  position: relative;
  display: flex;
  padding: 0 var(--control-medium-paddingInline-condensed, 0.5rem);
  font-size: var(--text-body-size-medium, 0.875rem);
  line-height: 30px;
  color: var(--fgColor-default, var(--color-fg-default));
  text-align: center;
  white-space: nowrap;
  cursor: pointer;
  background-color: transparent;
  border: 0;
  border-radius: var(--borderRadius-medium, 0.375rem);
  align-items: center;
}

.UnderlineNav-item:hover,
.UnderlineNav-item:focus,
.UnderlineNav-item:focus-visible {
  color: var(--fgColor-default, var(--color-fg-default));
  -webkit-text-decoration: none;
  text-decoration: none;
  border-bottom-color: var(
    --borderColor-neutral-muted,
    var(--color-neutral-muted)
  );
  outline-offset: -2px;
  transition: border-bottom-color 0.12s ease-out;
}

/* renders a visibly hidden "copy" of the label in bold, reserving box space for when label becomes bold on selected */

.UnderlineNav-item [data-content]::before {
  display: block;
  height: 0;
  font-weight: var(--base-text-weight-semibold, 600);
  visibility: hidden;
  content: attr(data-content);
}

/* increase touch target area */

.UnderlineNav-item::before {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 100%;
  min-height: 48px;
  content: '';
  transform: translateX(-50%) translateY(-50%);
}

/* hover state was "sticking" on mobile after click */

@media (pointer: fine) {
  .UnderlineNav-item:hover {
    color: var(--fgColor-default, var(--color-fg-default));
    -webkit-text-decoration: none;
    text-decoration: none;
    background: var(
      --control-transparent-bgColor-hover,
      var(--color-action-list-item-default-hover-bg)
    );
    transition: background 0.12s ease-out;
  }
}

.UnderlineNav-item.selected,
.UnderlineNav-item[role='tab'][aria-selected='true'],
.UnderlineNav-item[aria-current]:not([aria-current='false']) {
  font-weight: var(--base-text-weight-semibold, 600);
  color: var(--fgColor-default, var(--color-fg-default));
  border-bottom-color: var(
    --underlineNav-borderColor-active,
    var(--color-primer-border-active)
  );

  /* current/selected underline */
}

.UnderlineNav-item.selected::after,
.UnderlineNav-item[role='tab'][aria-selected='true']::after,
.UnderlineNav-item[aria-current]:not([aria-current='false'])::after {
  position: absolute;
  z-index: 1; /* raise above full-width flash banner */
  right: 50%;
  bottom: calc(50% - 25px); /* 48px total height / 2 (24px) + 1px */
  width: 100%;
  height: 2px;
  content: '';
  background: var(
    --underlineNav-borderColor-active,
    var(--color-primer-border-active)
  );
  border-radius: var(--borderRadius-medium, 0.375rem);
  transform: translate(50%, -50%);
}

.UnderlineNav--right {
  justify-content: flex-end;
}

.UnderlineNav--right .UnderlineNav-actions {
  flex: 1 1 auto;
}

.UnderlineNav-actions {
  align-self: center;
}

.UnderlineNav--full {
  display: block;

  /* required for underline to align with additional wrapper element */
}

.UnderlineNav--full .UnderlineNav-body {
  min-height: var(--base-size-48, 3rem);
}

.UnderlineNav-octicon {
  display: inline !important;
  margin-right: var(--control-medium-gap, 0.5rem);
  color: var(--fgColor-muted, var(--color-fg-muted));
  fill: var(--fgColor-muted, var(--color-fg-muted));
}

.UnderlineNav-container {
  display: flex;
  justify-content: space-between;
}

/* SegmentedControl */

.SegmentedControl {
  --segmentedControl-item-padding: var(
    --control-small-paddingBlock,
    0.25rem
  );

  display: inline-flex;
  list-style: none;
  background-color: var(
    --controlTrack-bgColor-rest,
    var(--color-segmented-control-bg)
  );
  border-radius: var(--borderRadius-medium, 0.375rem);
}

.SegmentedControl--iconOnly .Button--iconOnly.Button--small,
.SegmentedControl--iconOnly .Button--iconOnly.Button--medium,
.SegmentedControl--iconOnly .Button--iconOnly.Button--large {
  width: 100%;
  padding-inline: 0 !important;
}

/* sizes */

.SegmentedControl--small {
  --segmentedControl-item-padding: var(
    --control-xsmall-paddingBlock,
    0.125rem
  );
}

.SegmentedControl--small .SegmentedControl-item {
  height: var(--control-small-size, 1.75rem);
}

.SegmentedControl--small .SegmentedControl-item .Button {
  padding-inline: calc(
    var(--control-xsmall-paddingInline-normal, 0.5rem) - var(
        --segmentedControl-item-padding
      )
  );
}

.SegmentedControl--small.SegmentedControl--iconOnly
  .SegmentedControl-item {
  width: var(--control-small-size, 1.75rem);
}

.SegmentedControl--medium .SegmentedControl-item {
  height: var(--control-medium-size, 2rem);
}

.SegmentedControl--medium.SegmentedControl--iconOnly
  .SegmentedControl-item {
  width: var(--control-medium-size, 2rem);
}

.SegmentedControl--large .SegmentedControl-item {
  height: var(--control-large-size, 2.5rem);
}

.SegmentedControl--large .SegmentedControl-item .Button {
  padding-inline: calc(
    var(--control-large-paddingInline-normal, 0.75rem) - var(
        --segmentedControl-item-padding
      )
  );
}

.SegmentedControl--large.SegmentedControl--iconOnly
  .SegmentedControl-item {
  width: var(--control-large-size, 2.5rem);
}

/* item */

.SegmentedControl-item {
  position: relative;
  display: inline-flex;
  justify-content: center;
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    transparent;
  border-radius: var(--borderRadius-medium, 0.375rem);
  height: var(--control-medium-size, 2rem);
  padding: var(--segmentedControl-item-padding);

  /* button color overrides */
}

.SegmentedControl-item .Button--invisible:hover:not(:disabled) {
  background-color: var(
    --controlTrack-bgColor-hover,
    var(--color-action-list-item-default-hover-bg)
  );
}

.SegmentedControl-item .Button--invisible:active:not(:disabled) {
  background-color: var(
    --controlTrack-bgColor-active,
    var(--color-action-list-item-default-active-bg)
  );
}

/* Selected ---------------------------------------- */

.SegmentedControl-item.SegmentedControl-item--selected {
  background-color: var(
    --controlKnob-bgColor-rest,
    var(--color-segmented-control-button-bg)
  );
  border-color: var(
    --controlKnob-borderColor-rest,
    var(--color-segmented-control-button-selected-border)
  );
}

.SegmentedControl-item.SegmentedControl-item--selected .Button {
  font-weight: var(--base-text-weight-semibold, 600);
}

.SegmentedControl-item.SegmentedControl-item--selected .Button:hover {
  background-color: transparent;
}

.SegmentedControl-item.SegmentedControl-item--selected::before {
  border-color: transparent !important;
}

.SegmentedControl-item.SegmentedControl-item--selected
  + .SegmentedControl-item::before {
  border-color: transparent;
}

/* renders a visibly hidden "copy" of the text in bold, reserving box space for when text becomes bold on selected */

.SegmentedControl-item .Button-label[data-content]::before {
  display: block;
  height: 0;
  font-weight: var(--base-text-weight-semibold, 600);
  visibility: hidden;
  content: attr(data-content);
}

/* Separator lines */

.SegmentedControl-item:not(:first-child)::before {
  position: absolute;
  inset: 0 0 0 -1px;
  margin-top: var(--control-medium-paddingBlock, 0.375rem);
  margin-bottom: var(--control-medium-paddingBlock, 0.375rem);
  content: '';
  border-left: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));
}

/* Button ----------------------------------------- */

.SegmentedControl-item .Button {
  height: 100%;
  width: 100%;
  border: 0;
  font-weight: var(--base-text-weight-normal, 400);
  border-radius: calc(
    var(--borderRadius-medium, 0.375rem) - var(
        --segmentedControl-item-padding
      ) / 2
  );
  padding-inline: calc(
    var(--control-medium-paddingInline-normal, 0.75rem) - var(
        --segmentedControl-item-padding
      )
  );
}

.SegmentedControl-item .Button:focus-visible {
  outline-offset: calc(
    var(--segmentedControl-item-padding) - var(
        --borderWidth-thin,
        max(1px, 0.0625rem)
      )
  );
  border-radius: calc(
    var(--borderRadius-medium, 0.375rem) - var(
        --segmentedControl-item-padding
      ) / 1
  );
}

.SegmentedControl-item
  .Button--invisible.Button--invisible-noVisuals
  .Button-label {
  color: var(--button-default-fgColor-rest, var(--color-btn-text));
}

/* fullWidth */

.SegmentedControl--fullWidth {
  display: flex;
}

.SegmentedControl--fullWidth .SegmentedControl-item {
  flex: 1;
  justify-content: center;
}

/* menu */

/* A menu on the side of a page, defaults to left side. e.g. github.com/about */

.menu {
  margin-bottom: var(--stack-gap-normal, 1rem);
  list-style: none;
  background-color: var(
    --bgColor-default,
    var(--color-canvas-default)
  );
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));
  border-radius: var(--borderRadius-medium, 0.375rem);
}

.menu-item {
  position: relative;
  display: block;
  padding: var(--control-medium-paddingInline-condensed, 0.5rem)
    var(--control-medium-paddingInline-spacious, 1rem);
  color: var(--fgColor-default, var(--color-fg-default));
  border-bottom: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));
}

.menu-item:first-child {
  border-top: 0;
  border-top-left-radius: var(--borderRadius-medium, 0.375rem);
  border-top-right-radius: var(--borderRadius-medium, 0.375rem);
}

.menu-item:first-child::before {
  border-top-left-radius: var(--borderRadius-medium, 0.375rem);
}

.menu-item:last-child {
  border-bottom: 0;
  border-bottom-right-radius: var(--borderRadius-medium, 0.375rem);
  border-bottom-left-radius: var(--borderRadius-medium, 0.375rem);
}

.menu-item:last-child::before {
  border-bottom-left-radius: var(--borderRadius-medium, 0.375rem);
}

.menu-item:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: var(
    --bgColor-neutral-muted,
    var(--color-neutral-subtle)
  );
}

.menu-item:active {
  background-color: var(--bgColor-muted, var(--color-canvas-subtle));
}

.menu-item.selected,
.menu-item[aria-selected='true'],
.menu-item[aria-current]:not([aria-current='false']) {
  cursor: default;
  background-color: var(
    --menu-bgColor-active,
    var(--color-menu-bg-active)
  );
}

.menu-item.selected::before,
.menu-item[aria-selected='true']::before,
.menu-item[aria-current]:not([aria-current='false'])::before {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  width: 2px;
  content: '';
  background-color: var(
    --underlineNav-borderColor-active,
    var(--color-primer-border-active)
  );
}

.menu-item .octicon {
  width: 16px;
  margin-right: var(--control-medium-gap, 0.5rem);
  color: var(--fgColor-muted, var(--color-fg-muted));
  text-align: center;
}

.menu-item .Counter {
  float: right;
  margin-left: var(--control-small-gap, 0.25rem);
}

.menu-item .menu-warning {
  float: right;
  color: var(--fgColor-attention, var(--color-attention-fg));
}

.menu-item .avatar {
  float: left;
  margin-right: var(--control-small-gap, 0.25rem);
}

.menu-item.alert .Counter {
  color: var(--fgColor-danger, var(--color-danger-fg));
}

.menu-heading {
  display: block;
  padding: var(--control-medium-paddingInline-condensed, 0.5rem)
    var(--control-medium-paddingInline-spacious, 1rem);
  margin-top: 0;
  margin-bottom: 0;
  font-size: inherit;
  font-weight: var(--base-text-weight-semibold, 600);
  color: var(--fgColor-default, var(--color-fg-default));
  border-bottom: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));
}

.menu-heading:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.menu-heading:first-child {
  border-top-left-radius: var(--borderRadius-medium, 0.375rem);
  border-top-right-radius: var(--borderRadius-medium, 0.375rem);
}

.menu-heading:last-child {
  border-bottom: 0;
  border-bottom-right-radius: var(--borderRadius-medium, 0.375rem);
  border-bottom-left-radius: var(--borderRadius-medium, 0.375rem);
}

/* beta */

/* avatar */

.avatar {
  display: inline-block;
  overflow: hidden; /* Ensure page layout in Firefox should images fail to load */
  line-height: 1;
  vertical-align: middle;
  background-color: var(
    --avatar-bgColor,
    var(--color-avatar-bg)
  ); /* adds opaque bg to transparent avatars */
  border-radius: var(--borderRadius-medium, 0.375rem);
  flex-shrink: 0;
  box-shadow: 0 0 0 1px
    var(--avatar-borderColor, var(--color-avatar-border));
}

.avatar-link {
  float: left;
  line-height: 1;
}

/* User for example on /stars and /user for grids of avatars */

.avatar-group-item {
  display: inline-block;
  margin-bottom: 3px;
}

/* Border radius */

.avatar-1,
.avatar-2,
.avatar-small {
  border-radius: var(--borderRadius-small, 0.1875rem);
}

/* Sizes */

.avatar-1 {
  width: var(--base-size-16, 1rem);
  height: var(--base-size-16, 1rem);
}

.avatar-2 {
  width: var(--base-size-20, 1.25rem);
  height: var(--base-size-20, 1.25rem);
}

.avatar-3 {
  width: var(--base-size-24, 1.5rem);
  height: var(--base-size-24, 1.5rem);
}

.avatar-4 {
  width: var(--base-size-28, 1.75rem);
  height: var(--base-size-28, 1.75rem);
}

.avatar-5 {
  width: var(--base-size-32, 2rem);
  height: var(--base-size-32, 2rem);
}

.avatar-6 {
  width: var(--base-size-40, 2.5rem);
  height: var(--base-size-40, 2.5rem);
}

.avatar-7 {
  width: var(--base-size-48, 3rem);
  height: var(--base-size-48, 3rem);
}

.avatar-8 {
  width: var(--base-size-64, 4rem);
  height: var(--base-size-64, 4rem);
}

/* AvatarStack */

/* Stacked avatars can be used to show who is participating in thread when
** there is limited space available. */

.AvatarStack {
  position: relative;
  min-width: 26px;
  height: 20px;
}

.AvatarStack .AvatarStack-body {
  position: absolute;
}

.AvatarStack.AvatarStack--two {
  min-width: 36px;
}

.AvatarStack.AvatarStack--three-plus {
  min-width: 46px;
}

.AvatarStack-body {
  display: flex;
  background: var(--bgColor-default, var(--color-canvas-default));
  border-radius: 100px;
}

.AvatarStack-body .avatar {
  position: relative;
  z-index: 2;
  display: flex;
  width: 20px;
  height: 20px;
  box-sizing: content-box;
  margin-right: -11px;
  background-color: var(
    --bgColor-default,
    var(--color-canvas-default)
  );
  border-right: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--bgColor-default, var(--color-canvas-default));
  border-radius: var(--borderRadius-small, 0.1875rem);
  box-shadow: none;
  transition: margin 0.1s ease-in-out;
}

.AvatarStack-body .avatar:first-child {
  z-index: 3;
}

.AvatarStack-body .avatar:last-child {
  z-index: 1;
  border-right: 0;
}

.AvatarStack-body .avatar img {
  border-radius: var(--borderRadius-small, 0.1875rem);
}

/* Account for 4+ avatars */

.AvatarStack-body .avatar:nth-child(n + 4) {
  display: none;
  opacity: 0;
}

.AvatarStack-body:hover .avatar {
  margin-right: 3px;
}

.AvatarStack-body:hover .avatar:nth-child(n + 4) {
  display: flex;
  opacity: 1;
}

.AvatarStack-body:hover .avatar-more {
  display: none !important;
}

.avatar.avatar-more {
  z-index: 1;
  margin-right: 0;
  background: var(--bgColor-muted, var(--color-canvas-subtle));
}

.avatar.avatar-more::before,
.avatar.avatar-more::after {
  position: absolute;
  display: block;
  height: 20px;
  content: '';
  border-radius: 2px;
  outline: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--bgColor-default, var(--color-canvas-default));
}

.avatar.avatar-more::before {
  width: 17px;
  background: var(
    --avatarStack-fade-bgColor-muted,
    var(--color-avatar-stack-fade-more)
  );
}

.avatar.avatar-more::after {
  width: 14px;
  background: var(
    --avatarStack-fade-bgColor-default,
    var(--color-avatar-stack-fade)
  );
}

/* Right aligned variation */

.AvatarStack--right .AvatarStack-body {
  right: 0;
  flex-direction: row-reverse;
}

.AvatarStack--right .AvatarStack-body:hover .avatar {
  margin-right: 0;
  margin-left: 3px;
}

.AvatarStack--right .AvatarStack-body .avatar:not(:last-child) {
  border-left: 0;
}

.AvatarStack--right .avatar.avatar-more {
  background: var(
    --avatarStack-fade-bgColor-default,
    var(--color-avatar-stack-fade)
  );
}

.AvatarStack--right .avatar.avatar-more::before {
  width: 5px;
}

.AvatarStack--right .avatar.avatar-more::after {
  width: 2px;
  background: var(--bgColor-muted, var(--color-canvas-subtle));
}

.AvatarStack--right .avatar {
  margin-right: 0;
  margin-left: -11px;
  border-right: 0;
  border-left: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--bgColor-default, var(--color-canvas-default));
}

/* BorderBox */

/* TODO: Rename to BorderBox to match PVC */

.Box {
  background-color: var(
    --bgColor-default,
    var(--color-canvas-default)
  );
  border-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
  border-style: solid;
  border-width: var(--borderWidth-thin, max(1px, 0.0625rem));
  border-radius: var(--borderRadius-medium, 0.375rem);
}

/* Box padding density options */

.Box--condensed {
  line-height: 1.25;
}

.Box--condensed .Box-header {
  padding: var(--stack-padding-condensed, 0.5rem)
    var(--stack-padding-normal, 1rem);
}

.Box--condensed .Box-body {
  padding: var(--stack-padding-condensed, 0.5rem)
    var(--stack-padding-normal, 1rem);
}

.Box--condensed .Box-footer {
  padding: var(--stack-padding-condensed, 0.5rem)
    var(--stack-padding-normal, 1rem);
}

.Box--condensed .Box-btn-octicon.btn-octicon {
  padding: var(--control-medium-paddingInline-condensed, 0.5rem)
    var(--control-medium-paddingInline-spacious, 1rem);
  margin: calc(var(--controlStack-medium-gap-condensed, 0.5rem) * -1)
    calc(var(--controlStack-small-gap-spacious, 1rem) * -1);
  line-height: 1.25;
}

.Box--condensed .Box-row {
  padding: var(--stack-padding-condensed, 0.5rem)
    var(--stack-padding-normal, 1rem);
}

.Box--spacious .Box-header {
  padding: var(--stack-padding-spacious, 1.5rem);
  line-height: 1.25;
}

.Box--spacious .Box-title {
  font-size: var(--text-title-size-medium, 1.25rem);
}

.Box--spacious .Box-body {
  padding: var(--stack-padding-spacious, 1.5rem);
}

.Box--spacious .Box-footer {
  padding: var(--stack-padding-spacious, 1.5rem);
}

.Box--spacious .Box-btn-octicon.btn-octicon {
  padding: var(--stack-padding-spacious, 1.5rem);
  margin: calc(var(--stack-gap-spacious, 1.5rem) * -1)
    calc(var(--stack-gap-spacious, 1.5rem) * -1);
}

.Box--spacious .Box-row {
  padding: var(--stack-padding-spacious, 1.5rem);
}

.Box-header {
  padding: var(--stack-padding-normal, 1rem);
  margin: calc(var(--borderWidth-thin, max(1px, 0.0625rem)) * -1)
    calc(var(--borderWidth-thin, max(1px, 0.0625rem)) * -1) 0;
  background-color: var(--bgColor-muted, var(--color-canvas-subtle));
  border-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
  border-style: solid;
  border-width: var(--borderWidth-thin, max(1px, 0.0625rem));
  border-top-left-radius: var(--borderRadius-medium, 0.375rem);
  border-top-right-radius: var(--borderRadius-medium, 0.375rem);
}

.Box-title {
  font-size: var(--text-body-size-medium, 0.875rem);
  font-weight: var(--base-text-weight-semibold, 600);
}

.Box-body {
  padding: var(--stack-padding-normal, 1rem);
  border-bottom: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));

  /* Ensures bottom-border doesn't poke out when .Box-body used without box-footer */
}

.Box-body:last-of-type {
  margin-bottom: calc(
    var(--borderWidth-thin, max(1px, 0.0625rem)) * -1
  );
  border-bottom-right-radius: var(--borderRadius-medium, 0.375rem);
  border-bottom-left-radius: var(--borderRadius-medium, 0.375rem);
}

/* Box rows */

.Box-row {
  padding: var(--stack-padding-normal, 1rem);
  margin-top: calc(var(--borderWidth-thin, max(1px, 0.0625rem)) * -1);
  list-style-type: none; /* To account for applying Box component to a list */
  border-top-color: var(
    --borderColor-muted,
    var(--color-border-muted)
  );
  border-top-style: solid;
  border-top-width: var(--borderWidth-thin, max(1px, 0.0625rem));
}

.Box-row:first-of-type {
  border-top-left-radius: var(--borderRadius-medium, 0.375rem);
  border-top-right-radius: var(--borderRadius-medium, 0.375rem);
}

.Box-row:last-of-type {
  border-bottom-right-radius: var(--borderRadius-medium, 0.375rem);
  border-bottom-left-radius: var(--borderRadius-medium, 0.375rem);
}

/* Adds a blue vertical line to the left of the row
  ** For indicating a row item is unread */

.Box-row.Box-row--unread,
.Box-row.unread {
  box-shadow: inset 2px 0 0
    var(--borderColor-accent-emphasis, var(--color-accent-emphasis));
}

/* Focus styles for when drag icon */

.Box-row.navigation-focus .Box-row--drag-button {
  color: var(--fgColor-accent, var(--color-accent-fg));
  cursor: grab;
  opacity: 100;
}

/* Grabbing while row is dragged */

.Box-row.navigation-focus.is-dragging .Box-row--drag-button {
  cursor: grabbing;
}

/* Row dragging styles */

.Box-row.navigation-focus.sortable-chosen {
  background-color: var(--bgColor-muted, var(--color-canvas-subtle));
}

/* Makes dragging row background gray */

.Box-row.navigation-focus.sortable-ghost {
  background-color: var(--bgColor-muted, var(--color-canvas-subtle));

  /* Hides contents of row while dragging so row looks solid gray */
}

.Box-row.navigation-focus.sortable-ghost .Box-row--drag-hide {
  opacity: 0;
}

.Box-row--focus-gray.navigation-focus {
  background-color: var(--bgColor-muted, var(--color-canvas-subtle));
}

.Box-row--focus-blue.navigation-focus {
  background-color: var(
    --bgColor-accent-muted,
    var(--color-accent-subtle)
  );
}

.Box-row--hover-gray:hover {
  background-color: var(--bgColor-muted, var(--color-canvas-subtle));
}

.Box-row--hover-blue:hover {
  background-color: var(
    --bgColor-accent-muted,
    var(--color-accent-subtle)
  );
}

/* Optional link style
** Makes links on mobile blue since they don't have hover state,
** and links are dark-gray with blue hover on desktop. */

@media (min-width: 768px) {
  .Box-row-link {
    color: var(--fgColor-default, var(--color-fg-default));
    -webkit-text-decoration: none;
    text-decoration: none;
  }

  .Box-row-link:hover {
    color: var(--fgColor-accent, var(--color-accent-fg));
    -webkit-text-decoration: none;
    text-decoration: none;
  }
}

/* Optional drag icon styles for reordering items
** Focus styles included in .Box-row above */

.Box-row--drag-button {
  opacity: 0;
}

.Box-footer {
  padding: var(--stack-padding-normal, 1rem);
  margin-top: calc(
    var(--borderWidth-thin, max(1px, 0.0625rem)) * -1
  ); /* prevents double border when used with .Box-body */
  border-top-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
  border-top-style: solid;
  border-top-width: var(--borderWidth-thin, max(1px, 0.0625rem));
  border-radius: 0 0 var(--borderRadius-medium, 0.375rem)
    var(--borderRadius-medium, 0.375rem);
}

/* Option for a box with scrolling content */

.Box--scrollable {
  max-height: 324px;
  overflow: scroll;
}

/* Box themes */

.Box--blue {
  border-color: var(
    --borderColor-accent-muted,
    var(--color-accent-muted)
  );
}

.Box--blue .Box-header {
  background-color: var(
    --bgColor-accent-muted,
    var(--color-accent-subtle)
  );
  border-color: var(
    --borderColor-accent-muted,
    var(--color-accent-muted)
  );
}

.Box--blue .Box-body {
  border-color: var(
    --borderColor-accent-muted,
    var(--color-accent-muted)
  );
}

.Box--blue .Box-row {
  border-color: var(
    --borderColor-accent-muted,
    var(--color-accent-muted)
  );
}

.Box--blue .Box-footer {
  border-color: var(
    --borderColor-accent-muted,
    var(--color-accent-muted)
  );
}

/* Applies and red border to the outside of the box,
** but not to the border separating rows. */

.Box--danger {
  border-color: var(
    --borderColor-danger-emphasis,
    var(--color-danger-emphasis)
  );
}

.Box--danger .Box-row:first-of-type {
  border-color: var(
    --borderColor-danger-emphasis,
    var(--color-danger-emphasis)
  );
}

.Box--danger .Box-body:last-of-type {
  border-color: var(
    --borderColor-danger-emphasis,
    var(--color-danger-emphasis)
  );
}

.Box-header--blue {
  background-color: var(
    --bgColor-accent-muted,
    var(--color-accent-subtle)
  );
  border-color: var(
    --borderColor-accent-muted,
    var(--color-accent-muted)
  );
}

/* Box row highlight themes */

.Box-row--yellow {
  background-color: var(
    --bgColor-attention-muted,
    var(--color-attention-subtle)
  );
}

.Box-row--blue {
  background-color: var(
    --bgColor-accent-muted,
    var(--color-accent-subtle)
  );
}

.Box-row--gray {
  background-color: var(--bgColor-muted, var(--color-canvas-subtle));
}

/* Box with btn-octicon */

/* Increase specificity when btn-octicon is used because comes after .Box in the cascade */

.Box-btn-octicon.btn-octicon {
  padding: var(--control-medium-paddingInline-spacious, 1rem)
    var(--control-medium-paddingInline-spacious, 1rem);
  margin: calc(var(--controlStack-small-gap-spacious, 1rem) * -1)
    calc(var(--controlStack-small-gap-spacious, 1rem) * -1);
  line-height: 1.5; /* override btn-octicon line-height */
}

/* blankslate */

.blankslate-container {
  container-type: inline-size;
}

.blankslate {
  --blankslate-outer-padding-block: var(--base-size-32, 2rem);
  --blankslate-outer-padding-inline: var(--base-size-32, 2rem);

  position: relative;
  padding: var(--blankslate-outer-padding-block)
    var(--blankslate-outer-padding-inline);
  text-align: center;
}

.blankslate p {
  color: var(--fgColor-muted, var(--color-fg-muted));
  font-size: var(--text-body-size-large, 1rem);
}

.blankslate code {
  padding: 2px 5px 3px;
  font-size: var(--text-body-size-medium, 0.875rem);
  background: var(--bgColor-default, var(--color-canvas-default));
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-muted, var(--color-border-muted));
  border-radius: var(--borderRadius-medium, 0.375rem);
}

.blankslate img {
  width: 56px;
  height: 56px;
}

.blankslate-icon {
  margin-right: var(--control-small-gap, 0.25rem);
  margin-bottom: var(--stack-gap-condensed, 0.5rem);
  margin-left: var(--control-small-gap, 0.25rem);
  color: var(--fgColor-muted, var(--color-fg-muted));
}

.blankslate-image {
  margin-bottom: var(--stack-gap-normal, 1rem);
}

.blankslate-heading {
  font-size: var(--text-title-size-medium, 1.25rem);
  font-weight: var(--text-title-weight-medium, 600);
  margin-bottom: var(--base-size-4, 0.25rem);
}

.blankslate-action {
  margin-top: var(--stack-gap-normal, 1rem);
}

.blankslate-action:first-of-type {
  margin-top: var(--stack-gap-spacious, 1.5rem);
}

.blankslate-action:last-of-type {
  margin-bottom: var(--stack-gap-condensed, 0.5rem);
}

.blankslate-capped {
  border-radius: 0 0 var(--borderRadius-medium, 0.375rem)
    var(--borderRadius-medium, 0.375rem);
}

.blankslate-spacious {
  --blankslate-outer-padding-block: var(--base-size-80, 5rem);
  --blankslate-outer-padding-inline: var(--base-size-40, 2.5rem);
}

.blankslate-narrow {
  max-width: 485px;
  margin: 0 auto;
}

/* was .large-format
** QUESTION: should we deprecate this? */

.blankslate-large img {
  width: 80px;
  height: 80px;
}

.blankslate-large h3 {
  margin: var(--stack-gap-normal, 1rem) 0;

  /* font-size: $h3-size; // This doesn't actually make the text larger. Should this be $h2-size? */
  font-size: 24px;
}

.blankslate-large p {
  font-size: var(--text-body-size-large, 1rem);
}

/* was .clean-background
** TO DO: deprecate this and use utility instead */

.blankslate-clean-background {
  border: 0;
}

/* At the time these styles were written,
   `34rem` was our "small" breakpoint width */

@container (max-width: 34rem) {
  .blankslate {
    --blankslate-outer-padding-block: var(--base-size-20, 1.25rem);
    --blankslate-outer-padding-inline: var(--base-size-20, 1.25rem);
  }

  .blankslate-spacious {
    --blankslate-outer-padding-block: var(--base-size-44, 2.75rem);
    --blankslate-outer-padding-inline: var(--base-size-28, 1.75rem);
  }

  .blankslate-icon {
    margin-bottom: var(--stack-gap-condensed, 0.5rem);
  }

  .blankslate-heading {
    font-size: var(--text-title-size-small, 1rem);
  }

  .blankslate p {
    font-size: var(--text-body-size-medium, 0.875rem);
  }

  .blankslate-action {
    margin-top: var(--stack-gap-condensed, 0.5rem);
  }

  .blankslate-action:first-of-type {
    margin-top: var(--stack-gap-normal, 1rem);
  }

  .blankslate-action:last-of-type {
    margin-bottom: calc(var(--stack-gap-condensed, 0.5rem) / 2);
  }
}

.breadcrumb-item {
  display: inline-block;
  margin-left: -0.35em;
  white-space: nowrap;
  list-style: none;
}

.breadcrumb-item::after {
  display: inline-block;
  height: 0.8em;
  margin: 0 0.5em;
  content: '';
  border-right: 0.1em solid
    var(--borderColor-neutral-emphasis, var(--color-fg-subtle));
  transform: rotate(15deg);
}

.breadcrumb-item:first-child {
  margin-left: 0;
}

.breadcrumb-item-selected::after,
.breadcrumb-item[aria-current]:not([aria-current='false'])::after {
  content: none;
}

.breadcrumb-item-selected a {
  color: var(--fgColor-default, var(--color-fg-default));
}

/* Counter */

.Counter {
  display: inline-block;
  min-width: var(
    --base-size-20,
    1.25rem
  ); /* makes sure it's a circle with just one digit */
  padding: 0 6px;
  font-size: var(--text-body-size-small, 0.75rem);
  font-weight: var(--base-text-weight-medium, 500);
  line-height: calc(
    var(--base-size-20, 1.25rem) - var(
        --borderWidth-thin,
        max(1px, 0.0625rem)
      ) * 2
  ); /* 20px - 2px for the borders */
  color: var(--fgColor-default, var(--color-fg-default));
  text-align: center;
  background-color: var(
    --bgColor-neutral-muted,
    var(--color-neutral-muted)
  );
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--counter-borderColor, var(--color-counter-border));
  border-radius: 2em;
}

.Counter:empty {
  display: none;
}

/* Is this selector used? could not find any use of it */

.Counter .octicon {
  vertical-align: text-top;
  opacity: 0.8;
}

.Counter--primary {
  color: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  background-color: var(
    --bgColor-neutral-emphasis,
    var(--color-fg-subtle)
  );
}

.Counter--secondary {
  color: var(--fgColor-muted, var(--color-fg-muted));
  background-color: var(
    --bgColor-neutral-muted,
    var(--color-neutral-subtle)
  );
}

/* flash */

/* Default flash */

.flash:not(.Banner) {
  position: relative;
  padding: var(--base-size-20, 1.25rem)
    var(--control-medium-paddingInline-spacious, 1rem);
  border-style: solid;
  border-width: var(--borderWidth-thin, max(1px, 0.0625rem));
  border-radius: var(--borderRadius-medium, 0.375rem);

  /* Default color */
  color: var(--fgColor-default, var(--color-fg-default));
  background-image: linear-gradient(
    var(--bgColor-accent-muted, var(--color-accent-subtle)),
    var(--bgColor-accent-muted, var(--color-accent-subtle))
  );
  border-color: var(
    --borderColor-accent-muted,
    var(--color-accent-muted)
  );
}

.flash:not(.Banner) .octicon {
  color: var(--fgColor-accent, var(--color-accent-fg));
  margin-right: var(--base-size-12, 0.75rem);
}

.flash:not(.Banner) p:last-child {
  margin-bottom: 0;
}

/* Contain the flash messages */

.flash-messages {
  margin-bottom: var(--stack-gap-spacious, 1.5rem);
}

/* Close button */

.flash-close:not(.Banner-close) {
  float: right;
  margin-top: calc(var(--base-size-4, 0.25rem) * -1);
  text-align: center;
  cursor: pointer;

  /* Undo `<button>` styles */
  background: none;
  border: 0;
  -webkit-appearance: none;
  appearance: none;
}

.flash-close:not(.Banner-close):hover {
  opacity: 0.7;
}

.flash-close:not(.Banner-close):active {
  opacity: 0.5;
}

.flash-close:not(.Banner-close) .octicon {
  margin-right: 0;
}

/* Action button */

.flash-action:not(.Banner-actions) {
  float: right;
  margin-top: -3px;
  margin-left: var(--stack-gap-spacious, 1.5rem);
  background-clip: padding-box;
}

.flash-action.btn:not(.Banner-actions) .octicon {
  margin-right: var(--control-small-gap, 0.25rem);
  color: var(--fgColor-muted, var(--color-fg-muted));
}

.flash-action.btn-primary:not(.Banner-actions) {
  background-clip: border-box;
}

.flash-action.btn-primary:not(.Banner-actions) .octicon {
  color: inherit;
}

/* Color variations */

.flash-warn:not(.Banner) {
  color: var(--fgColor-default, var(--color-fg-default));
  background-image: linear-gradient(
    var(--bgColor-attention-muted, var(--color-attention-subtle)),
    var(--bgColor-attention-muted, var(--color-attention-subtle))
  );
  border-color: var(
    --borderColor-attention-muted,
    var(--color-attention-muted)
  );
}

.flash-warn:not(.Banner) .octicon {
  color: var(--fgColor-attention, var(--color-attention-fg));
}

.flash-error:not(.Banner) {
  color: var(--fgColor-default, var(--color-fg-default));
  background-image: linear-gradient(
    var(--bgColor-danger-muted, var(--color-danger-subtle)),
    var(--bgColor-danger-muted, var(--color-danger-subtle))
  );
  border-color: var(
    --borderColor-danger-muted,
    var(--color-danger-muted)
  );
}

.flash-error:not(.Banner) .octicon {
  color: var(--fgColor-danger, var(--color-danger-fg));
}

.flash-success:not(.Banner) {
  color: var(--fgColor-default, var(--color-fg-default));
  background-image: linear-gradient(
    var(--bgColor-success-muted, var(--color-success-subtle)),
    var(--bgColor-success-muted, var(--color-success-subtle))
  );
  border-color: var(
    --borderColor-success-muted,
    var(--color-success-muted)
  );
}

.flash-success:not(.Banner) .octicon {
  color: var(--fgColor-success, var(--color-success-fg));
}

/* Layout variations */

.flash-full:not(.Banner) {
  margin-top: calc(var(--borderWidth-thin, max(1px, 0.0625rem)) * -1);
  border-width: var(--borderWidth-thin, max(1px, 0.0625rem)) 0;
  border-radius: 0;
}

/* A banner rendered at the top of the page. */

.flash-banner {
  position: fixed;
  top: 0;
  z-index: 90;
  width: 100%;
  border-top: 0;
  border-right: 0;
  border-left: 0;
  border-radius: 0;
}

/* Makes sure the background is opaque to cover any content underneath */

.flash-full,
.flash-banner {
  background-color: var(
    --bgColor-default,
    var(--color-canvas-default)
  );
}

/* FIXME deprecate this */

.warning {
  padding: 0.5em;
  margin-bottom: 0.8em;
  font-weight: var(--base-text-weight-semibold, 600);
  background-color: var(
    --bgColor-attention-muted,
    var(--color-attention-subtle)
  );
}

/* Labels */

/* Provide a wrapper to ensure labels stick together */

.labels {
  position: relative;
}

/* Default 20px */

.label, /* TODO: Deprecate */
.Label {
  display: inline-block;
  padding: 0 7px;
  font-size: var(--text-body-size-small, 0.75rem);
  font-weight: var(--base-text-weight-medium, 500);
  line-height: 18px;
  white-space: nowrap;
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));
  border-radius: 2em;
}

.label:hover,
.Label:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

/* Large 24px */

.Label--large {
  padding-right: 10px;
  padding-left: 10px;
  line-height: 22px;
}

/* Inline */

/* Doesn't increase height of parent element
** Can be used with different font-sizes */

.Label--inline {
  display: inline;
  padding: 0.12em 0.5em;
  font-size: 85%;
}

/* Contrast */

.Label--primary {
  color: var(--fgColor-default, var(--color-fg-default));
  border-color: var(
    --borderColor-neutral-emphasis,
    var(--color-fg-subtle)
  );
}

.Label--secondary {
  color: var(--fgColor-muted, var(--color-fg-muted));
  border-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
}

/* Colors */

.Label--info, /* TODO: deprecate */
.Label--accent {
  color: var(--fgColor-accent, var(--color-accent-fg));
  border-color: var(
    --borderColor-accent-emphasis,
    var(--color-accent-emphasis)
  );
}

.Label--success {
  color: var(--fgColor-success, var(--color-success-fg));
  border-color: var(
    --borderColor-success-emphasis,
    var(--color-success-emphasis)
  );
}

.Label--warning, /* TODO: deprecate */
.Label--attention {
  color: var(--fgColor-attention, var(--color-attention-fg));
  border-color: var(
    --borderColor-attention-emphasis,
    var(--color-attention-emphasis)
  );
}

.Label--severe {
  color: var(--fgColor-severe, var(--color-severe-fg));
  border-color: var(
    --borderColor-severe-emphasis,
    var(--color-severe-emphasis)
  );
}

.Label--danger {
  color: var(--fgColor-danger, var(--color-danger-fg));
  border-color: var(
    --borderColor-danger-emphasis,
    var(--color-danger-emphasis)
  );
}

.Label--open {
  color: var(--fgColor-open, var(--color-open-fg));
  border-color: var(
    --borderColor-open-emphasis,
    var(--color-open-emphasis)
  );
}

.Label--closed {
  color: var(--fgColor-closed, var(--color-closed-fg));
  border-color: var(
    --borderColor-closed-emphasis,
    var(--color-closed-emphasis)
  );
}

.Label--done {
  color: var(--fgColor-done, var(--color-done-fg));
  border-color: var(
    --borderColor-done-emphasis,
    var(--color-done-emphasis)
  );
}

.Label--sponsors {
  color: var(--fgColor-sponsors, var(--color-sponsors-fg));
  border-color: var(
    --borderColor-sponsors-emphasis,
    var(--color-sponsors-emphasis)
  );
}

/* Links */

.Link {
  color: var(--fgColor-accent, var(--color-accent-fg));
  -webkit-text-decoration: none;
  text-decoration: none;
}

.Link:hover {
  -webkit-text-decoration: underline;
  text-decoration: underline;
  cursor: pointer;
}

.Link:focus {
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.Link:focus,
.Link:focus-visible {
  outline-offset: 0;
}

.Link--underline {
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.Link--primary {
  color: var(--fgColor-default, var(--color-fg-default)) !important;
}

.Link--primary:hover {
  color: var(--fgColor-accent, var(--color-accent-fg)) !important;
}

.Link--secondary {
  color: var(--fgColor-muted, var(--color-fg-muted)) !important;
}

.Link--secondary:hover {
  color: var(--fgColor-accent, var(--color-accent-fg)) !important;
}

.Link--muted {
  color: var(--fgColor-muted, var(--color-fg-muted)) !important;
}

.Link--muted:hover {
  color: var(--fgColor-accent, var(--color-accent-fg)) !important;
  -webkit-text-decoration: none;
  text-decoration: none;
}

/* Set the link color only on hover
   Useful when you want only part of a link to turn blue on hover */

.Link--onHover:hover {
  color: var(--fgColor-accent, var(--color-accent-fg)) !important;
  -webkit-text-decoration: underline;
  text-decoration: underline;
  cursor: pointer;
}

/* When using a color utility class inside of a link class
   color should change with link on hover. */

.Link--secondary:hover [class*='color-fg'],
.Link--primary:hover [class*='color-fg'],
.Link--muted:hover [class*='color-fg'] {
  color: inherit !important;
}

/* Popover */

.Popover {
  position: absolute;
  z-index: 100;
}

.Popover-message {
  position: relative;
  width: 232px;
  margin-right: auto;
  margin-left: auto;
  background-color: var(
    --overlay-bgColor,
    var(--color-canvas-overlay)
  );
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-default, var(--color-border-default));
  border-radius: var(--borderRadius-medium, 0.375rem);

  /* Carets */
}

.Popover-message::before,
.Popover-message::after {
  position: absolute;
  left: 50%;
  display: inline-block;
  content: '';
}

.Popover-message::before {
  top: -16px;
  margin-left: -9px;
  border: 8px solid transparent;
  border-bottom-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
}

.Popover-message::after {
  top: -14px;
  margin-left: -8px;
  border: 7px solid transparent;
  border-bottom-color: var(
    --overlay-bgColor,
    var(--color-canvas-overlay)
  );
}

/* No caret */

.Popover-message--no-caret::before,
.Popover-message--no-caret::after {
  display: none;
}

/* Bottom-oriented carets */

.Popover-message--bottom::before,
.Popover-message--bottom-right::before,
.Popover-message--bottom-left::before,
.Popover-message--bottom::after,
.Popover-message--bottom-right::after,
.Popover-message--bottom-left::after {
  top: auto;
  border-bottom-color: transparent;
}

.Popover-message--bottom::before,
.Popover-message--bottom-right::before,
.Popover-message--bottom-left::before {
  bottom: -16px;
  border-top-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
}

.Popover-message--bottom::after,
.Popover-message--bottom-right::after,
.Popover-message--bottom-left::after {
  bottom: -14px;
  border-top-color: var(
    --overlay-bgColor,
    var(--color-canvas-overlay)
  );
}

/* Top and Bottom: Right-oriented carets */

.Popover-message--top-right,
.Popover-message--bottom-right {
  right: -9px;
  margin-right: 0;
}

.Popover-message--top-right::before,
.Popover-message--bottom-right::before,
.Popover-message--top-right::after,
.Popover-message--bottom-right::after {
  left: auto;
  margin-left: 0;
}

.Popover-message--top-right::before,
.Popover-message--bottom-right::before {
  right: 20px;
}

.Popover-message--top-right::after,
.Popover-message--bottom-right::after {
  right: 21px;
}

/* Top and Bottom: Left-oriented carets */

.Popover-message--top-left,
.Popover-message--bottom-left {
  left: -9px;
  margin-left: 0;
}

.Popover-message--top-left::before,
.Popover-message--bottom-left::before,
.Popover-message--top-left::after,
.Popover-message--bottom-left::after {
  left: 24px;
  margin-left: 0;
}

.Popover-message--top-left::after,
.Popover-message--bottom-left::after {
  left: 25px;
}

/* Right- and Left-oriented carets */

.Popover-message--right::before,
.Popover-message--right-top::before,
.Popover-message--right-bottom::before,
.Popover-message--left::before,
.Popover-message--left-top::before,
.Popover-message--left-bottom::before,
.Popover-message--right::after,
.Popover-message--right-top::after,
.Popover-message--right-bottom::after,
.Popover-message--left::after,
.Popover-message--left-top::after,
.Popover-message--left-bottom::after {
  top: 50%;
  left: auto;
  margin-left: 0;
  border-bottom-color: transparent;
}

.Popover-message--right::before,
.Popover-message--right-top::before,
.Popover-message--right-bottom::before,
.Popover-message--left::before,
.Popover-message--left-top::before,
.Popover-message--left-bottom::before {
  margin-top: -9px;
}

.Popover-message--right::after,
.Popover-message--right-top::after,
.Popover-message--right-bottom::after,
.Popover-message--left::after,
.Popover-message--left-top::after,
.Popover-message--left-bottom::after {
  margin-top: -8px;
}

/* Right-oriented carets */

.Popover-message--right::before,
.Popover-message--right-top::before,
.Popover-message--right-bottom::before {
  right: -16px;
  border-left-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
}

.Popover-message--right::after,
.Popover-message--right-top::after,
.Popover-message--right-bottom::after {
  right: -14px;
  border-left-color: var(
    --overlay-bgColor,
    var(--color-canvas-overlay)
  );
}

/* Left-oriented carets */

.Popover-message--left::before,
.Popover-message--left-top::before,
.Popover-message--left-bottom::before {
  left: -16px;
  border-right-color: var(
    --borderColor-default,
    var(--color-border-default)
  );
}

.Popover-message--left::after,
.Popover-message--left-top::after,
.Popover-message--left-bottom::after {
  left: -14px;
  border-right-color: var(
    --overlay-bgColor,
    var(--color-canvas-overlay)
  );
}

/* Right and Left: Top-oriented carets */

.Popover-message--right-top::before,
.Popover-message--left-top::before,
.Popover-message--right-top::after,
.Popover-message--left-top::after {
  top: 24px;
}

/* Right and Left: Bottom-oriented carets */

.Popover-message--right-bottom::before,
.Popover-message--left-bottom::before,
.Popover-message--right-bottom::after,
.Popover-message--left-bottom::after {
  top: auto;
}

.Popover-message--right-bottom::before,
.Popover-message--left-bottom::before {
  bottom: 16px;
}

.Popover-message--right-bottom::after,
.Popover-message--left-bottom::after {
  bottom: 17px;
}

@media (min-width: 544px) {
  .Popover-message--large {
    min-width: 320px;
  }
}

/* Responsive Popover
** For < md it will show full-width anchored to the bottom */

@media (max-width: 767.98px) {
  .Popover {
    position: fixed;
    top: auto !important;
    right: 0 !important;
    bottom: 0 !important;
    left: 0 !important;
  }

  .Popover-message {
    top: auto;
    right: auto;
    bottom: auto;
    left: auto;
    width: auto !important;
    margin: var(--stack-gap-condensed, 0.5rem);
  }

  /* Increase tap area for touch input */
  .Popover-message > .btn-octicon {
    padding: var(
      --control-medium-paddingInline-normal,
      0.75rem
    ) !important;
  }

  /* Remove caret */
  .Popover-message::after,
  .Popover-message::before {
    display: none;
  }
}

/* Progress */

.Progress {
  display: flex;
  height: 8px;
  overflow: hidden;
  background-color: var(
    --bgColor-neutral-muted,
    var(--color-neutral-subtle)
  );
  border-radius: 6px;
  outline: 1px solid transparent; /* Support Firefox custom colors */
}

.Progress--large {
  height: 10px;
}

.Progress--small {
  height: 5px;
}

.Progress-item {
  outline: 2px solid transparent; /* Support Firefox custom colors */
}

.Progress-item + .Progress-item {
  margin-left: 2px;
}

/* State */

/* Default 32px */

.state, /* TODO: Deprecate */
.State {
  display: inline-block;
  padding: 5px var(--control-medium-paddingInline-normal, 0.75rem);
  font-size: var(--text-body-size-medium, 0.875rem);
  font-weight: var(--base-text-weight-medium, 500);
  line-height: var(--control-medium-lineBoxHeight, 1.25rem);
  text-align: center;
  white-space: nowrap;
  border-radius: 2em;
}

.state, /* TODO: Deprecate */
.State,
.State--draft {
  color: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  background-color: var(
    --bgColor-neutral-emphasis,
    var(--color-fg-subtle)
  );
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    transparent;
}

.State--open {
  color: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  background-color: var(
    --bgColor-open-emphasis,
    var(--color-open-emphasis)
  );
}

.State--merged {
  color: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  background-color: var(
    --bgColor-done-emphasis,
    var(--color-done-emphasis)
  );
}

.State--closed {
  color: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  background-color: var(
    --bgColor-closed-emphasis,
    var(--color-closed-emphasis)
  );
}

/* Small 24px */

.State--small {
  padding: 0 10px;
  font-size: var(--text-body-size-small, 0.75rem);
  line-height: var(--base-size-24, 1.5rem);
}

.State--small .octicon {
  width: 1em; /* Ensures different icons don't change State indicator width */
}

/* Truncate */

.Truncate {
  display: inline-flex;
  min-width: 0;
  max-width: 100%;
}

.Truncate > .Truncate-text {
  min-width: 1ch;
  max-width: -moz-fit-content;
  max-width: fit-content;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.Truncate > .Truncate-text + .Truncate-text {
  margin-left: var(--control-small-gap, 0.25rem);
}

.Truncate > .Truncate-text.Truncate-text--primary {
  flex-basis: 200%;
}

.Truncate > .Truncate-text.Truncate-text--expandable:hover,
.Truncate > .Truncate-text.Truncate-text--expandable:focus,
.Truncate > .Truncate-text.Truncate-text--expandable:active {
  max-width: 100% !important;
  flex-shrink: 0;
  cursor: pointer;
}

/* to be renamed */

/* TimelineItem */

.TimelineItem {
  position: relative;
  display: flex;
  padding: var(--stack-padding-normal, 1rem) 0;
  margin-left: var(--stack-gap-normal, 1rem);

  /* The Timeline */
}

.TimelineItem::before {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  display: block;
  width: var(--borderWidth-thick, max(2px, 0.125rem));
  content: '';
  background-color: var(
    --borderColor-muted,
    var(--color-border-muted)
  );
}

.TimelineItem:target .TimelineItem-badge {
  border-color: var(
    --borderColor-accent-emphasis,
    var(--color-accent-emphasis)
  );
  box-shadow: 0 0 0.2em
    var(--borderColor-accent-muted, var(--color-accent-muted));
}

.TimelineItem-badge {
  position: relative;
  z-index: 1;
  display: flex;
  width: var(--control-medium-size, 2rem);
  height: var(--control-medium-size, 2rem);
  margin-right: var(--controlStack-medium-gap-condensed, 0.5rem);
  margin-left: calc(var(--control-medium-size, 2rem) / -2 + 1px);
  color: var(--fgColor-muted, var(--color-fg-muted));
  align-items: center;
  background-color: var(
    --timelineBadge-bgColor,
    var(--color-timeline-badge-bg)
  );
  border: var(--borderWidth-thick, max(2px, 0.125rem)) solid
    var(--bgColor-default, var(--color-canvas-default));
  border-radius: 50%;
  justify-content: center;
  flex-shrink: 0;
}

.TimelineItem-badge--success {
  color: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  background-color: var(
    --bgColor-success-emphasis,
    var(--color-success-emphasis)
  );
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    transparent;
}

.TimelineItem-body {
  min-width: 0;
  max-width: 100%;
  margin-top: var(--base-size-4, 0.25rem);
  color: var(--fgColor-muted, var(--color-fg-muted));
  flex: auto;
}

.TimelineItem-avatar {
  position: absolute;
  left: -72px;
  z-index: 1;
}

.TimelineItem-break {
  position: relative;
  z-index: 1;
  height: var(--stack-gap-spacious, 1.5rem);
  margin: 0;
  margin-bottom: calc(var(--stack-gap-normal, 1rem) * -1);
  margin-left: -56px;
  background-color: var(
    --bgColor-default,
    var(--color-canvas-default)
  );
  border: 0;
  border-top: var(--borderWidth-thicker, max(4px, 0.25rem)) solid
    var(--borderColor-default, var(--color-border-default));
}

.TimelineItem--condensed {
  padding-top: var(--base-size-4, 0.25rem);
  padding-bottom: 0;

  /* TimelineItem--condensed is often grouped. (commits) */
}

.TimelineItem--condensed:last-child {
  padding-bottom: var(--stack-gap-normal, 1rem);
}

.TimelineItem--condensed .TimelineItem-badge {
  height: var(--base-size-16, 1rem);
  margin-top: var(--base-size-8, 0.5rem);
  margin-bottom: var(--base-size-8, 0.5rem);
  color: var(--fgColor-muted, var(--color-fg-muted));
  background-color: var(
    --bgColor-default,
    var(--color-canvas-default)
  );
  border: 0;
}

/* CSS truncate */

/* css-truncate will shorten text with an ellipsis. */

/* css-truncate-overflow will shorten text with an ellipsis when overflowing */

.css-truncate.css-truncate-overflow,
.css-truncate .css-truncate-overflow,
.css-truncate.css-truncate-target,
.css-truncate .css-truncate-target {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* css-truncate-target will shorten text with an ellipsis and a max width */

.css-truncate.css-truncate-target,
.css-truncate .css-truncate-target {
  display: inline-block;
  max-width: 125px;
  vertical-align: top;
}

.css-truncate.expandable.zeroclipboard-is-hover .css-truncate-target,
.css-truncate.expandable.zeroclipboard-is-hover.css-truncate-target,
.css-truncate.expandable:hover .css-truncate-target,
.css-truncate.expandable.css-truncate-target:hover {
  max-width: 10000px !important;
}

/* CSS for ActionBar  */

.ActionBar {
  position: relative;
  display: flex !important;
  min-width: calc(var(--control-medium-size, 2rem) * 3);
  align-items: center;
  flex-grow: 1;
  flex-shrink: 1;
  box-sizing: content-box;
  overflow: hidden;
  justify-content: flex-end;
}

.ActionBar-item-container {
  display: flex;
  box-sizing: content-box;
  align-items: center;
  flex-shrink: 0;
  flex-grow: 0;
}

.ActionBar-item {
  position: relative;
  flex-shrink: 0;
}

.ActionBar-more-menu {
  flex-shrink: 0;
}

.ActionBar--small {
  min-width: calc(var(--control-small-size, 1.75rem) * 3);
}

.ActionBar--large {
  min-width: calc(var(--control-large-size, 2.5rem) * 3);
}

/* Divider */

.ActionBar-divider {
  height: calc(var(--control-medium-size, 2rem) / 2);
  margin: 0 var(--controlStack-medium-gap-condensed, 0.5rem);
  border-left: var(--borderWidth-thin, max(1px, 0.0625rem)) solid
    var(--borderColor-muted, var(--color-border-muted));
}

.ActionBar--small .ActionBar-divider {
  margin: 0 var(--controlStack-small-gap-condensed, 0.5rem);
}

.ActionBar--large .ActionBar-divider {
  margin: 0 var(--controlStack-large-gap-condensed, 0.5rem);
}
