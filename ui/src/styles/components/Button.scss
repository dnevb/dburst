/* CSS for Button  */

/* temporary, pre primitives release */

:root {
  --duration-fast: 80ms;
  --easing-easeInOut: cubic-bezier(0.65, 0, 0.35, 1);
}

/* base button */

.Button {
  position: relative;
  font-size: var(--text-body-size-medium, 0.875rem);
  font-weight: var(--base-text-weight-medium, 500);
  cursor: pointer;
  -webkit-user-select: none;
  user-select: none;
  background-color: transparent;
  border: var(--borderWidth-thin, max(1px, 0.0625rem)) solid;
  border-color: transparent;
  border-radius: var(--borderRadius-medium, 0.375rem);
  color: var(--button-default-fgColor-rest, var(--color-btn-text));
  transition: var(--duration-fast) var(--easing-easeInOut);
  transition-property: color, fill, background-color, border-color;
  text-align: center;
  height: var(--control-medium-size, 2rem);
  padding: 0 var(--control-medium-paddingInline-normal, 0.75rem);
  display: inline-flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  gap: var(--base-size-4, 0.25rem);
  min-width: max-content;

  /* mobile friendly sizing */

  @media (pointer: coarse) {
    &::before {
      position: absolute;
      top: 50%;
      left: 50%;
      width: 100%;
      height: 100%;
      min-height: 48px;
      content: '';
      transform: translateX(-50%) translateY(-50%);
      min-width: 48px;
    }
  }

  /* base states */

  &:hover {
    transition-duration: var(--duration-fast);
  }

  &:active {
    transition: none;
  }

  &:disabled {
    cursor: not-allowed;
    box-shadow: none;
  }

  .Button[aria-disabled='true'] {
    cursor: default;
    box-shadow: none;
  }

  a.Button:hover,
  summary.Button:hover {
    -webkit-text-decoration: none;
    text-decoration: none;
  }

  /* wrap grid content to allow trailingAction to lock-right */

  .content {
    flex: 1 0 auto;
    display: grid;
    grid-template-areas: 'leadingVisual text trailingVisual';
    grid-template-columns: min-content minmax(0, auto) min-content;
    align-items: center;
    place-content: center;

    /* padding-bottom: 1px; optical alignment for firefox */
  }

  .content > :not(:last-child) {
    margin-right: var(--control-medium-gap, 0.5rem);
  }

  /* center child elements for fullWidth */

  .content--alignStart {
    justify-content: start;
  }

  /* button child elements */

  /* align svg */

  .visual {
    display: flex;
    pointer-events: none; /* allow click handler to work, avoiding visuals */
  }

  .visual .Counter {
    color: inherit;
    background-color: var(
      --buttonCounter-default-bgColor-rest,
      var(--color-btn-counter-bg)
    );
  }

  .label {
    grid-area: text;
    white-space: nowrap;
    line-height: var(--text-body-lineHeight-medium, 1.4285);
    user-select: initial;
    border: initial;
    display: initial;
    padding: initial;
    white-space: initial;
  }

  .leadingVisual {
    grid-area: leadingVisual;
  }

  .leadingVisual svg {
    fill: currentcolor;
  }

  .trailingVisual {
    grid-area: trailingVisual;
  }

  .trailingAction {
    margin-right: calc(var(--base-size-4, 0.25rem) * -1);
  }

  /* sizes */

  &.small {
    font-size: var(--text-body-size-small, 0.75rem);
    height: var(--control-small-size, 1.75rem);
    padding: 0 var(--control-small-paddingInline-condensed, 0.5rem);
    gap: var(--control-small-gap, 0.25rem);
  }

  &.small .label {
    line-height: var(--text-body-lineHeight-small, 1.6666);
  }

  &.small .content > :not(:last-child) {
    margin-right: var(--control-small-gap, 0.25rem);
  }

  &.large {
    height: var(--control-large-size, 2.5rem);
    padding: 0 var(--control-large-paddingInline-spacious, 1rem);
    gap: var(--control-large-gap, 0.5rem);
  }

  &.large .label {
    line-height: var(--text-body-lineHeight-large, 1.5);
  }

  &.large .content > :not(:last-child) {
    margin-right: var(--control-large-gap, 0.5rem);
  }

  &.fullWidth {
    width: 100%;
  }

  /* variants */

  /* primary */

  &.primary {
    color: var(
      --button-primary-fgColor-rest,
      var(--color-btn-primary-text)
    );
    fill: var(
      --button-primary-iconColor-rest,
      var(--color-btn-primary-icon)
    );
    background-color: var(
      --button-primary-bgColor-rest,
      var(--color-btn-primary-bg)
    );
    border-color: var(
      --button-primary-borderColor-rest,
      var(--color-btn-primary-border)
    );
    box-shadow: var(
      --shadow-resting-small,
      var(--color-btn-primary-shadow)
    );
  }

  &.primary:hover:not(:disabled) {
    background-color: var(
      --button-primary-bgColor-hover,
      var(--color-btn-primary-hover-bg)
    );
    border-color: var(
      --button-primary-borderColor-hover,
      var(--color-btn-primary-hover-border)
    );
  }

  /* fallback :focus state */

  &.primary:focus {
    outline: 2px solid
      var(--focus-outlineColor, var(--color-accent-fg));
    outline-offset: -2px;
    box-shadow: inset 0 0 0 3px
      var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));

    /* remove fallback :focus if :focus-visible is supported */
  }

  &.primary:focus:not(:focus-visible) {
    outline: solid 1px transparent;
    box-shadow: none;
  }

  /* default focus state */

  &.primary:focus-visible {
    outline: 2px solid
      var(--focus-outlineColor, var(--color-accent-fg));
    outline-offset: -2px;
    box-shadow: inset 0 0 0 3px
      var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  }

  &.primary:active:not(:disabled),
  &.primary[aria-pressed='true'] {
    background-color: var(
      --button-primary-bgColor-active,
      var(--color-btn-primary-selected-bg)
    );
    box-shadow: var(
      --button-primary-shadow-selected,
      var(--color-btn-primary-selected-shadow)
    );
  }

  &.primary:disabled,
  &.primary[aria-disabled='true'] {
    color: var(
      --button-primary-fgColor-disabled,
      var(--color-btn-primary-disabled-text)
    );
    background-color: var(
      --button-primary-bgColor-disabled,
      var(--color-btn-primary-disabled-bg)
    );
    border-color: var(
      --button-primary-borderColor-disabled,
      var(--color-btn-primary-disabled-border)
    );
    fill: var(
      --button-primary-fgColor-disabled,
      var(--color-btn-primary-disabled-text)
    );
  }

  &.primary .Counter {
    color: inherit;
    background-color: var(
      --buttonCounter-primary-bgColor-rest,
      var(--color-btn-primary-counter-bg)
    );
  }

  /* default (secondary) */

  &.secondary {
    color: var(--button-default-fgColor-rest, var(--color-btn-text));
    fill: var(--fgColor-muted, var(--color-fg-muted)); /* help this */
    background-color: var(
      --button-default-bgColor-rest,
      var(--color-btn-bg)
    );
    border-color: var(
      --button-default-borderColor-rest,
      var(--color-btn-border)
    );
    box-shadow: var(
        --button-default-shadow-resting,
        var(--color-btn-shadow)
      ),
      var(
        --button-default-shadow-inset,
        var(--color-btn-inset-shadow)
      );
  }

  &.secondary:hover:not(:disabled) {
    background-color: var(
      --button-default-bgColor-hover,
      var(--color-btn-hover-bg)
    );
    border-color: var(
      --button-default-borderColor-hover,
      var(--color-btn-hover-border)
    );
  }

  &.secondary:active:not(:disabled) {
    background-color: var(
      --button-default-bgColor-active,
      var(--color-btn-active-bg)
    );
    border-color: var(
      --button-default-borderColor-active,
      var(--color-btn-active-border)
    );
  }

  &.secondary[aria-pressed='true'] {
    background-color: var(
      --button-default-bgColor-selected,
      var(--color-btn-selected-bg)
    );
    box-shadow: var(--shadow-inset, var(--color-primer-shadow-inset));
  }

  &.secondary:disabled,
  &.secondary[aria-disabled='true'] {
    color: var(
      --control-fgColor-disabled,
      var(--color-primer-fg-disabled)
    );
    background-color: var(
      --button-default-bgColor-disabled,
      var(--color-btn-bg)
    );
    border-color: var(
      --button-default-borderColor-disabled,
      var(--color-btn-border)
    );
    fill: var(
      --control-fgColor-disabled,
      var(--color-primer-fg-disabled)
    );
  }

  &.invisible {
    color: var(--button-default-fgColor-rest, var(--color-btn-text));
  }

  &.invisible:hover:not(:disabled) {
    background-color: var(
      --button-invisible-bgColor-hover,
      var(--color-action-list-item-default-hover-bg)
    );
  }

  &.invisible:hover:not(:disabled) .visual {
    color: var(
      --button-invisible-iconColor-hover,
      var(--color-fg-default)
    );
  }

  &.invisible[aria-pressed='true'],
  &.invisible:active:not(:disabled) {
    background-color: var(
      --button-invisible-bgColor-active,
      var(--color-action-list-item-default-active-bg)
    );
  }

  &.invisible:disabled,
  &.invisible[aria-disabled='true'] {
    color: var(
      --button-invisible-fgColor-disabled,
      var(--color-primer-fg-disabled)
    );
    background-color: var(
      --button-invisible-bgColor-disabled,
      var(--color-action-list-item-default-selected-bg)
    );
    border-color: var(
      --button-invisible-borderColor-disabled,
      var(--color-action-list-item-default-selected-bg)
    );
    fill: var(
      --button-invisible-fgColor-disabled,
      var(--color-primer-fg-disabled)
    );
  }

  /* if button has no visuals, use link blue for text */

  &.invisible .visual {
    color: var(
      --button-invisible-iconColor-rest,
      var(--color-fg-muted)
    );
  }

  &.invisible .visual .Counter {
    color: var(--fgColor-default, var(--color-fg-default));
  }

  &.link {
    color: var(--fgColor-link, var(--color-accent-fg));
    fill: var(--fgColor-link, var(--color-accent-fg));
    display: inline-block;
    font-size: inherit;
    border: none;
    height: unset;
    padding: 0;
  }

  &.link:hover:not(:disabled) {
    -webkit-text-decoration: underline;
    text-decoration: underline;
  }

  &.link:focus-visible,
  &.link:focus {
    outline-offset: 2px;
  }

  &.link:disabled,
  &.link[aria-disabled='true'] {
    color: var(
      --control-fgColor-disabled,
      var(--color-primer-fg-disabled)
    );
    background-color: transparent;
    border-color: transparent;
    fill: var(
      --control-fgColor-disabled,
      var(--color-primer-fg-disabled)
    );
  }

  /* danger */

  &.danger {
    color: var(
      --button-danger-fgColor-rest,
      var(--color-btn-danger-text)
    );
    fill: var(
      --button-danger-iconColor-rest,
      var(--color-btn-danger-icon)
    );
    background-color: var(
      --button-danger-bgColor-rest,
      var(--color-btn-bg)
    );
    border-color: var(
      --button-danger-borderColor-rest,
      var(--color-btn-border)
    );
    box-shadow: var(
        --button-default-shadow-resting,
        var(--color-btn-shadow)
      ),
      var(
        --button-default-shadow-inset,
        var(--color-btn-inset-shadow)
      );
  }

  &.danger:hover:not(:disabled) {
    color: var(
      --button-danger-fgColor-hover,
      var(--color-btn-danger-hover-text)
    );
    fill: var(
      --button-danger-fgColor-hover,
      var(--color-btn-danger-hover-text)
    );
    background-color: var(
      --button-danger-bgColor-hover,
      var(--color-btn-danger-hover-bg)
    );
    border-color: var(
      --button-danger-borderColor-hover,
      var(--color-btn-danger-hover-border)
    );
    box-shadow: var(
      --shadow-resting-small,
      var(--color-shadow-small)
    );
  }

  &.danger:hover:not(:disabled) .Counter {
    color: var(
      --buttonCounter-danger-fgColor-hover,
      var(--color-btn-danger-hover-counter-fg)
    );
    background-color: var(
      --buttonCounter-danger-bgColor-hover,
      var(--color-btn-danger-hover-counter-bg)
    );
  }

  &.danger:active:not(:disabled),
  &.danger[aria-pressed='true'] {
    color: var(
      --button-danger-fgColor-active,
      var(--color-btn-danger-selected-text)
    );
    fill: var(
      --button-danger-fgColor-active,
      var(--color-btn-danger-selected-text)
    );
    background-color: var(
      --button-danger-bgColor-active,
      var(--color-btn-danger-selected-bg)
    );
    border-color: var(
      --button-danger-borderColor-active,
      var(--color-btn-danger-selected-border)
    );
    box-shadow: var(
      --button-danger-shadow-selected,
      var(--color-btn-danger-selected-shadow)
    );
  }

  &.danger:disabled,
  &.danger[aria-disabled='true'] {
    color: var(
      --button-danger-fgColor-disabled,
      var(--color-btn-danger-disabled-text)
    );
    fill: var(
      --button-danger-fgColor-disabled,
      var(--color-btn-danger-disabled-text)
    );
    background-color: var(
      --button-danger-bgColor-disabled,
      var(--color-btn-danger-disabled-bg)
    );
    border-color: var(
      --button-default-borderColor-disabled,
      var(--color-btn-border)
    );
  }

  &.danger:disabled .Counter,
  &.danger[aria-disabled='true'] .Counter {
    color: var(
      --buttonCounter-danger-fgColor-disabled,
      var(--color-btn-danger-disabled-counter-fg)
    );
    background-color: var(
      --buttonCounter-danger-bgColor-disabled,
      var(--color-btn-danger-disabled-counter-bg)
    );
  }

  &.danger .Counter {
    color: var(
      --buttonCounter-danger-fgColor-rest,
      var(--color-btn-danger-counter-fg)
    );
    background-color: var(
      --buttonCounter-danger-bgColor-rest,
      var(--color-btn-danger-counter-bg)
    );
  }

  &.iconOnly {
    display: inline-grid;
    place-content: center;
    padding: unset;
    width: var(--control-medium-size, 2rem);
  }
}
.ButtonGroup {
  display: inline-flex;
}

.ButtonGroup .Button {
  margin-inline-end: -1px;
  position: relative;
  border-radius: 0;
}

.ButtonGroup .Button:focus,
.ButtonGroup .Button:active,
.ButtonGroup .Button:hover {
  z-index: 1;
}

.ButtonGroup > :first-child .Button {
  border-top-left-radius: var(--borderRadius-medium, 0.375rem);
  border-bottom-left-radius: var(--borderRadius-medium, 0.375rem);
}

.ButtonGroup > :last-child .Button {
  border-top-right-radius: var(--borderRadius-medium, 0.375rem);
  border-bottom-right-radius: var(--borderRadius-medium, 0.375rem);
}
