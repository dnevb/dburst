.ActionListHeader {
  margin-left: var(--base-size-8, 0.5rem);
  margin-bottom: var(--base-size-16, 1rem);
}

/* <ul> */

.ActionList {
  list-style: none;

  &.inset {
    padding: var(--base-size-8, 0.5rem);
  }

  /* list dividers */

  &.divided .item-label::before {
    position: absolute;
    top: calc(-1 * var(--actionListContent-paddingBlock));
    display: block;
    width: 100%;
    height: 1px;
    content: '';
    background: var(
      --borderColor-muted,
      var(--color-action-list-item-inline-divider)
    );
  }

  /* if descriptionWrap--inline exists, move pseudo divider to wrapper */

  &.divided .item-descriptionWrap--inline::before {
    position: absolute;
    top: calc(-1 * var(--actionListContent-paddingBlock));
    display: block;
    width: 100%;
    height: var(--borderWidth-thin, max(1px, 0.0625rem));
    content: '';
    background: var(
      --borderColor-muted,
      var(--color-action-list-item-inline-divider)
    );
  }

  /* unset the default label pseudo */

  &.divided .item-descriptionWrap--inline .item-label::before {
    content: unset;
  }

  /* hide divider if item is active */

  &.divided .item--navActive .item-label::before,
  &.divided .item--navActive + .item .item-label::before {
    visibility: hidden;
  }

  /* hide if item is first of type with label::before, or is the first item after a sectionDivider */

  .item:first-of-type .item-label::before,
  .sectionDivider + .item .item-label::before {
    visibility: hidden;
  }

  /* hide if item is first of type with label::before, or is the first item after a sectionDivider */

  .item:first-of-type .item-descriptionWrap--inline::before,
  .sectionDivider + .item .item-descriptionWrap--inline::before {
    visibility: hidden;
  }

  /* ActionList::Item */

  .item {
    position: relative;
    list-style: none;
    background-color: var(
      --control-transparent-bgColor-rest,
      transparent
    );
    border-radius: var(--borderRadius-medium, 0.375rem);

    /* state */
  }

  .item:hover,
  .item:active {
    cursor: pointer;
  }

  /* hide dividers  */

  @media (hover: hover) {
    .item:hover .item-label::before,
    .item:hover + .item .item-label::before {
      visibility: hidden;
    }

    .item:hover .item-descriptionWrap--inline::before,
    .item:hover + .item .item-descriptionWrap--inline::before {
      visibility: hidden;
    }
  }

  /* Make sure that the first visible item isn't a divider */

  .item[hidden] + .sectionDivider {
    display: none;
  }

  /* collapse styles here */

  /* first child */

  .item--hasSubItem > .content {
    z-index: 1;
  }

  @media (hover: hover) {
    .item--hasSubItem > .content:hover {
      background-color: var(
        --control-transparent-bgColor-hover,
        var(--color-action-list-item-default-hover-bg)
      );
    }
  }

  .item--hasSubItem > .content:active {
    background-color: var(
      --control-transparent-bgColor-active,
      var(--color-action-list-item-default-active-bg)
    );
  }

  /* only hover li without list as children */

  @media (hover: hover) {
    .item:not(.item--hasSubItem):hover,
    .item--hasSubItem > .content:hover {
      cursor: pointer;
      background-color: var(
        --control-transparent-bgColor-hover,
        var(--color-action-list-item-default-hover-bg)
      );
    }

    .item:not(.item--hasSubItem):hover:not(
        .item--navActive,
        :focus-visible
      ),
    .item--hasSubItem
      > .content:hover:not(.item--navActive, :focus-visible) {
      /* Support for "Windows high contrast mode" */
      outline: solid var(--borderWidth-thin, max(1px, 0.0625rem))
        transparent;
      outline-offset: calc(
        -1 * var(--borderWidth-thin, max(1px, 0.0625rem))
      );
      box-shadow: var(
          --boxShadow-thin,
          inset 0 0 0 max(1px, 0.0625rem)
        )
        var(
          --control-transparent-borderColor-active,
          var(--color-action-list-item-default-active-border)
        );
    }
  }

  .item:not(.item--hasSubItem):active,
  .item--hasSubItem > .content:active {
    background: var(
      --control-transparent-bgColor-active,
      var(--color-action-list-item-default-active-bg)
    );
  }

  .item:not(.item--hasSubItem):active:not(.item--navActive),
  .item--hasSubItem > .content:active:not(.item--navActive) {
    /* Support for "Windows high contrast mode" https:sarahmhigley.com/writing/whcm-quick-tips/ */
    outline: solid var(--borderWidth-thin, max(1px, 0.0625rem))
      transparent;
    outline-offset: calc(
      -1 * var(--borderWidth-thin, max(1px, 0.0625rem))
    );
    box-shadow: var(--boxShadow-thin, inset 0 0 0 max(1px, 0.0625rem))
      var(
        --control-transparent-borderColor-active,
        var(--color-action-list-item-default-active-border)
      );
  }

  .item:not(.item--hasSubItem):active .item-label::before,
  .item--hasSubItem > .content:active .item-label::before,
  .item:not(.item--hasSubItem):active + .item .item-label::before,
  .item--hasSubItem > .content:active + .item .item-label::before {
    visibility: hidden;
  }

  /* Autocomplete [aria-selected] items */

  .item[aria-selected='true'] {
    font-weight: var(--base-text-weight-normal, 400);
    background: var(
      --control-transparent-bgColor-selected,
      var(--color-action-list-item-default-selected-bg)
    );
  }

  @media (hover: hover) {
    .item[aria-selected='true']:hover {
      background-color: var(
        --control-transparent-bgColor-hover,
        var(--color-action-list-item-default-hover-bg)
      );
    }
  }

  .item[aria-selected='true']::before,
  .item[aria-selected='true'] + .item::before {
    visibility: hidden;
  }

  /* blue accent line */

  .item[aria-selected='true']::after {
    position: absolute;
    top: calc(50% - 12px);
    left: calc(-1 * var(--base-size-4, 0.25rem));
    width: var(--base-size-4, 0.25rem);
    height: var(--base-size-24, 1.5rem);
    content: '';
    background: var(
      --borderColor-accent-emphasis,
      var(--color-accent-emphasis)
    );
    border-radius: var(--borderRadius-medium, 0.375rem);
  }

  /* active state [aria-current] */

  .item--navActive {
    /* provides a visual indication of the current item for Windows high-contrast mode */
    outline: 2px solid transparent;
  }

  .item--navActive:not(.item--subItem) .item-label {
    font-weight: var(--base-text-weight-semibold, 600);
  }

  .item--navActive:not(.item--danger) {
    background: var(
      --control-transparent-bgColor-selected,
      var(--color-action-list-item-default-selected-bg)
    );
  }

  @media (hover: hover) {
    .item--navActive:not(.item--danger):hover {
      background-color: var(
        --control-transparent-bgColor-hover,
        var(--color-action-list-item-default-hover-bg)
      );
    }
  }

  .item--navActive:not(.item--danger)::before,
  .item--navActive:not(.item--danger) + .item::before {
    visibility: hidden;
  }

  /* blue accent line  */

  .item--navActive:not(.item--danger)::after {
    position: absolute;
    top: calc(50% - 12px);
    left: calc(-1 * var(--base-size-8, 0.5rem));
    width: var(--base-size-4, 0.25rem);
    height: var(--base-size-24, 1.5rem);
    content: '';
    background: var(
      --borderColor-accent-emphasis,
      var(--color-accent-emphasis)
    );
    border-radius: var(--borderRadius-medium, 0.375rem);
  }

  /* disabled */

  .item--disabled .content .item-label,
  .item[aria-disabled='true'] .content .item-label,
  .item--disabled .content .item-description,
  .item[aria-disabled='true'] .content .item-description {
    color: var(
      --control-fgColor-disabled,
      var(--color-primer-fg-disabled)
    );
  }

  .item--disabled .content .item-visual,
  .item[aria-disabled='true'] .content .item-visual {
    fill: var(
      --control-fgColor-disabled,
      var(--color-primer-fg-disabled)
    );
  }

  @media (hover: hover) {
    .item--disabled:hover,
    .item[aria-disabled='true']:hover {
      cursor: not-allowed;
      background-color: transparent;
    }
  }

  /* variants */

  /* danger */

  .item--danger .item-label {
    color: var(--control-danger-fgColor-rest, var(--color-danger-fg));
  }

  .item--danger .item-visual {
    color: var(--control-danger-fgColor-rest, var(--color-danger-fg));
  }

  @media (hover: hover) {
    .item--danger:hover {
      background: var(
        --control-danger-bgColor-hover,
        var(--color-action-list-item-danger-hover-bg)
      );
    }

    .item--danger:hover .item-label,
    .item--danger:hover .item-visual,
    .item--danger:hover .item-description {
      color: var(
        --control-danger-fgColor-hover,
        var(--color-action-list-item-danger-hover-text)
      );
    }
  }

  .item--danger .content:active {
    background: var(
      --control-danger-bgColor-active,
      var(--color-action-list-item-danger-active-bg)
    );
  }

  .item--danger .content:active .item-label,
  .item--danger .content:active .item-visual,
  .item--danger .content:active .item-description {
    color: var(
      --control-danger-fgColor-hover,
      var(--color-action-list-item-danger-hover-text)
    );
  }

  /* button or a href */

  .content {
    position: relative;
    display: grid;
    width: 100%;
    padding-block: var(--actionListContent-paddingBlock);
    padding-inline: var(
      --control-medium-paddingInline-condensed,
      0.5rem
    );
    color: var(--control-fgColor-rest, var(--color-fg-default));
    text-align: left;
    -webkit-user-select: none;
    user-select: none;
    background-color: transparent;
    border: none;
    border-radius: var(--borderRadius-medium, 0.375rem);
    transition: background 33.333ms linear;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
    grid-template-rows: min-content;
    grid-template-areas: 'leadingAction leadingVisual label trailingVisual trailingAction';
    grid-template-columns: min-content min-content minmax(0, auto) min-content min-content;
    align-items: start;

    /* column-gap persists with empty grid-areas, margin applies only when children exist */
  }

  .content > :not(:last-child) {
    margin-right: var(--control-medium-gap, 0.5rem);
  }

  /* state */

  .content:hover {
    -webkit-text-decoration: none;
    text-decoration: none;
  }

  /* disabled */

  .content[aria-disabled='true'] .item-label,
  .content[aria-disabled='true'] .item-description {
    color: var(
      --control-fgColor-disabled,
      var(--color-primer-fg-disabled)
    );
  }

  .content[aria-disabled='true'] .item-visual {
    fill: var(
      --control-fgColor-disabled,
      var(--color-primer-fg-disabled)
    );
  }

  @media (hover: hover) {
    .content[aria-disabled='true']:hover {
      cursor: not-allowed;
      background-color: transparent;
    }
  }

  /* collapsible item [aria-expanded] */

  /* nesting (single level)
   target items inside expanded subgroups */

  @media screen and (prefers-reduced-motion: no-preference) {
    .content[aria-expanded] + .subGroup {
      transition:
        opacity 160ms cubic-bezier(0.25, 1, 0.5, 1),
        transform 160ms cubic-bezier(0.25, 1, 0.5, 1);
    }
  }

  .content[aria-expanded] + .subGroup .content {
    padding-left: var(--base-size-24, 1.5rem);
  }

  /* has 16px leading visual */

  .content--visual16[aria-expanded] + .subGroup .content {
    padding-left: var(--base-size-32, 2rem);
  }

  /* has 20px leading visual */

  .content--visual20[aria-expanded] + .subGroup .content {
    padding-left: var(--base-size-36, 2.25rem);
  }

  /* has 24px leading visual */

  .content--visual24[aria-expanded] + .subGroup .content {
    padding-left: var(--base-size-40, 2.5rem);
  }

  .content[aria-expanded='true'] .item-collapseIcon {
    transition: transform 120ms linear;
    transform: scaleY(-1);
  }

  .content[aria-expanded='true'] + .subGroup {
    height: auto;
    overflow: visible;
    visibility: visible;
    opacity: 1;
    transform: translateY(0);
  }

  .content--hasActiveSubItem[aria-expanded='true'] > .item-label {
    font-weight: var(--base-text-weight-semibold, 600);
  }

  .content[aria-expanded='false'] .item-collapseIcon {
    transition: transform 120ms linear;
    transform: scaleY(1);
  }

  .content[aria-expanded='false'] + .subGroup {
    height: 0;
    overflow: hidden;
    visibility: hidden;
    opacity: 0;
    transform: translateY(calc(-1 * var(--base-size-16, 1rem)));
  }

  /* show active indicator on parent collapse if child is active */

  .content--hasActiveSubItem[aria-expanded='false'] {
    background: var(
      --control-transparent-bgColor-selected,
      var(--color-action-list-item-default-selected-bg)
    );
  }

  .content--hasActiveSubItem[aria-expanded='false'] .item-label {
    font-weight: var(--base-text-weight-semibold, 600);
  }

  .content--hasActiveSubItem[aria-expanded='false']::before,
  .content--hasActiveSubItem[aria-expanded='false'] + .item::before {
    visibility: hidden;
  }

  /* blue accent line */

  .content--hasActiveSubItem[aria-expanded='false']::after {
    position: absolute;
    top: calc(50% - 12px);
    left: calc(-1 * var(--base-size-8, 0.5rem));
    width: var(--base-size-4, 0.25rem);
    height: var(--base-size-24, 1.5rem);
    content: '';
    background: var(
      --borderColor-accent-emphasis,
      var(--color-accent-emphasis)
    );
    border-radius: var(--borderRadius-medium, 0.375rem);
  }

  /*
  * checkbox item [aria-checked]
  * listbox [aria-selected]
  */

  /* multiselect checkmark */

  .content[aria-checked='true'] .item-multiSelectCheckmark,
  .content[aria-selected='true'] .item-multiSelectCheckmark {
    visibility: visible;
    opacity: 1;
    transition:
      visibility 0 linear 0,
      opacity 50ms;
  }

  /* singleselect checkmark */

  .content[aria-checked='true'] .item-singleSelectCheckmark,
  .content[aria-selected='true'] .item-singleSelectCheckmark {
    visibility: visible;
  }

  @media screen and (prefers-reduced-motion: no-preference) {
    .content[aria-checked='true'] .item-singleSelectCheckmark,
    .content[aria-selected='true'] .item-singleSelectCheckmark {
      animation: checkmarkIn 200ms cubic-bezier(0.11, 0, 0.5, 0)
        forwards;
      @keyframes checkmarkIn {
        from {
          clip-path: inset(16px 0 0 0);
        }

        to {
          clip-path: inset(0 0 0 0);
        }
      }
    }
  }

  /* checkbox */

  .content[aria-checked='true']
    .item-multiSelectIcon
    .item-multiSelectIconRect,
  .content[aria-selected='true']
    .item-multiSelectIcon
    .item-multiSelectIconRect {
    fill: var(
      --control-checked-bgColor-rest,
      var(--color-switch-track-checked-bg)
    );
    stroke: var(
      --control-checked-bgColor-rest,
      var(--color-switch-track-checked-bg)
    );
    stroke-width: var(--borderWidth-thin, 1px);
  }

  .content[aria-checked='true']
    .item-multiSelectIcon
    .item-multiSelectCheckmark,
  .content[aria-selected='true']
    .item-multiSelectIcon
    .item-multiSelectCheckmark {
    fill: var(--fgColor-onEmphasis, var(--color-fg-on-emphasis));
  }

  /* multiselect checkmark */

  .content[aria-checked='false'] .item-multiSelectCheckmark,
  .content[aria-selected='false'] .item-multiSelectCheckmark {
    visibility: hidden;
    opacity: 0;
    transition:
      visibility 0 linear 50ms,
      opacity 50ms;
  }

  /* singleselect checkmark */

  .content[aria-checked='false'] .item-singleSelectCheckmark,
  .content[aria-selected='false'] .item-singleSelectCheckmark {
    visibility: hidden;
    transition: visibility 0s linear 200ms;
    clip-path: inset(16px 0 0 0);
  }

  @media screen and (prefers-reduced-motion: no-preference) {
    .content[aria-checked='false'] .item-singleSelectCheckmark,
    .content[aria-selected='false'] .item-singleSelectCheckmark {
      animation: checkmarkOut 200ms cubic-bezier(0.11, 0, 0.5, 0)
        forwards;
      @keyframes checkmarkOut {
        from {
          clip-path: inset(0 0 0 0);
        }

        to {
          clip-path: inset(16px 0 0 0);
        }
      }
    }
  }

  /* checkbox */

  .content[aria-checked='false']
    .item-multiSelectIcon
    .item-multiSelectIconRect,
  .content[aria-selected='false']
    .item-multiSelectIcon
    .item-multiSelectIconRect {
    fill: var(--bgColor-default, var(--color-canvas-default));
    stroke: var(--control-borderColor-rest, var(--color-btn-border));
    stroke-width: var(--borderWidth-thin, 1px);
  }

  .content[aria-checked='false'] .item-multiSelectIconRect,
  .content[aria-selected='false'] .item-multiSelectIconRect {
    fill: var(--bgColor-default, var(--color-canvas-default));
    border: var(--borderWidth-thin, 1px) solid
      var(--control-borderColor-rest, var(--color-btn-border));
  }

  /* sizes */

  .content--sizeLarge {
    --actionListContent-paddingBlock: var(
      --control-large-paddingBlock,
      0.625rem
    );
  }

  .content--sizeXLarge {
    --actionListContent-paddingBlock: var(
      --control-xlarge-paddingBlock,
      0.875rem
    );
  }

  /* On pointer:coarse (mobile), all list items are large */

  @media (pointer: coarse) {
    .content {
      --actionListContent-paddingBlock: var(
        --control-large-paddingBlock,
        0.625rem
      );
    }
  }

  /* if leading/trailing visual, align with first line of content */

  .content--blockDescription .item-visual {
    place-self: start;
  }

  /* place children on grid */

  .item-action--leading {
    grid-area: leadingAction;
  }

  .item-visual--leading {
    grid-area: leadingVisual;
  }

  .item-visual--trailing {
    grid-area: trailingVisual;
  }

  .item-action--trailing {
    grid-area: trailingAction;
  }

  /* have leading visual svg filled with chosen color */

  .item-visual--leading svg {
    fill: currentcolor;
  }

  /* wrapper span
 default block */

  .item-descriptionWrap {
    grid-area: label;
    display: flex;
    flex-direction: column;
    gap: var(--base-size-4, 0.25rem);
  }

  .item-descriptionWrap .item-label {
    font-weight: var(--base-text-weight-semibold, 600);
  }

  /* inline */

  .item-descriptionWrap--inline {
    position: relative;
    flex-direction: row;
    align-items: baseline;
    gap: var(--base-size-8, 0.5rem);
  }

  /* description */

  .item-description {
    font-size: var(--text-body-size-small, 0.75rem);
    font-weight: var(--base-text-weight-normal, 400);
    line-height: var(--text-body-lineHeight-small, 1.6666);
    color: var(--fgColor-muted, var(--color-fg-muted));
  }

  /* helper for grid alignment with multi-line content
 span wrapping svg or text */

  .item-visual,
  .item-action {
    display: flex;
    min-height: var(--control-medium-lineBoxHeight, 1.25rem);
    color: var(--fgColor-muted, var(--color-fg-muted));
    pointer-events: none;
    fill: var(--fgColor-muted, var(--color-fg-muted));
    align-items: center;
  }

  /* text */

  .item-label {
    position: relative;
    font-size: var(--text-body-size-medium, 0.875rem);
    font-weight: var(--base-text-weight-normal, 400);
    line-height: var(--text-body-lineHeight-medium, 1.4285);
    color: var(--fgColor-default, var(--color-fg-default));
    grid-area: label;
  }

  .item-label--truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  /* nested lists (only supports 1 level currently)
 target ActionListItem--subItem for padding-left to maintain :active :after state */

  .item--subItem > .content > .item-label {
    font-size: var(--text-body-size-small, 0.75rem);
    line-height: var(--text-body-lineHeight-small, 1.6666);
  }

  /* trailing action icon button */

  .item--withActions {
    display: flex;
    flex-wrap: nowrap;
    align-items: center;
  }

  .item-trailingAction {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  /* show trailing action button on hover */

  .item--trailingActionHover .item-trailingAction {
    visibility: hidden;
  }

  .item--trailingActionHover:hover .item-trailingAction,
  .item--trailingActionHover:focus-within .item-trailingAction {
    visibility: visible;
  }

  /* ActionList::Divider */

  /* with children */

  .sectionDivider:not(:empty) {
    display: flex;
    padding-inline: var(--actionListContent-paddingBlock);
    padding-block: var(--base-size-8, 0.5rem);
    font-size: var(--text-body-size-small, 0.75rem);
    line-height: var(--text-body-lineHeight-small, 1.6666);
    font-weight: var(--base-text-weight-semibold, 600);
    color: var(--fgColor-muted, var(--color-fg-muted));
    flex-direction: column;
  }

  /* no children */

  .sectionDivider:empty {
    display: block;
    height: var(--borderWidth-thin, max(1px, 0.0625rem));
    padding: 0;
    margin-block-start: calc(
      var(--base-size-8, 0.5rem) - var(
          --borderWidth-thin,
          max(1px, 0.0625rem)
        )
    );
    margin-block-end: var(--base-size-8, 0.5rem);
    margin-inline: calc(-1 * var(--base-size-8, 0.5rem));
    list-style: none;
    background: var(
      --borderColor-muted,
      var(--color-action-list-item-inline-divider)
    );
    border: 0;
  }

  .sectionDivider .sectionDivider-title {
    font-size: var(--text-body-size-small, 0.75rem);
    font-weight: var(--base-text-weight-semibold, 600);
    color: var(--fgColor-muted, var(--color-fg-muted));
  }

  .sectionDivider--filled {
    margin-block-start: calc(
      var(--base-size-8, 0.5rem) - var(
          --borderWidth-thin,
          max(1px, 0.0625rem)
        )
    );
    margin-block-end: var(--base-size-8, 0.5rem);
    margin-inline: calc(-1 * var(--base-size-8, 0.5rem));
    background: var(--bgColor-muted, var(--color-canvas-subtle));
    border-top: solid var(--borderWidth-thin, max(1px, 0.0625rem))
      var(
        --borderColor-muted,
        var(--color-action-list-item-inline-divider)
      );
    border-bottom: solid var(--borderWidth-thin, max(1px, 0.0625rem))
      var(
        --borderColor-muted,
        var(--color-action-list-item-inline-divider)
      );

    /* if no children, treat as divider */
  }

  .sectionDivider--filled:empty {
    height: var(--base-size-8, 0.5rem);
    box-sizing: border-box;
  }

  .sectionDivider--filled:first-child {
    margin-block-start: 0;
  }
}
