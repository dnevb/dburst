.Treeview,
[role='tree'] {
  list-style: none;
  padding: 0;
  margin: 0;

  .item,
  [role='treeitem'] {
    outline: none;

    &:focus-visible > div,
    &.focus-visible > div {
      // box-shadow: inset 0 0 0 2px ${get(`colors.accent.fg`)};
      @media (forced-colors: active) {
        outline: 2px solid HighlightText;
        outline-offset: -2;
      }
    }
  }

  .item-container {
    --level: 1; /* default level */
    --toggle-width: 1rem; /* 16px */
    position: relative;
    display: grid;
    grid-template-columns:
      calc(calc(var(--level) - 1) * (var(--toggle-width) / 2))
      var(--toggle-width) 1fr;
    grid-template-areas: 'spacer toggle content';
    width: 100%;
    min-height: 2rem; /* 32px */
    // font-size: ${get('fontSizes.1')};
    border-radius: var(--borderRadius-medium, 0.375rem);
    cursor: pointer;

    &:hover {
      background-color: var(
        --control-transparent-bgColor-hover,
        var(--color-action-list-item-default-hover-bg)
      );

      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: -2px;
      }
    }

    @media (pointer: coarse) {
      --toggle-width: 1.5rem; /* 24px */
      min-height: 2.75rem; /* 44px */
    }

    &:has(.item-skeleton):hover {
      background-color: transparent;
      cursor: default;

      @media (forced-colors: active) {
        outline: none;
      }
    }
  }

  &[data-omit-spacer='true'] .item-container {
    grid-template-columns: 0 0 1fr;
  }

  .item[aria-current='true'] > .item-container {
    background: var(
      --control-transparent-bgColor-selected,
      var(--color-action-list-item-default-selected-bg)
    );

    /* Current item indicator */
    &::after {
      content: '';
      position: absolute;
      top: calc(50% - 0.75rem); /* 50% - 12px */
      left: calc(-1 * var(--base-size-2, 0.25rem));
      width: var(--base-size-4, 0.25rem);
      height: var(--base-size-24, 1.5rem);
      background: var(
        --borderColor-accent-emphasis,
        var(--color-accent-emphasis)
      );
      border-radius: var(--borderRadius-medium, 0.375rem);

      @media (forced-colors: active) {
        background-color: HighlightText;
      }
    }
  }

  .item-toggle {
    grid-area: toggle;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    // color: var(--color-fg-muted);
  }

  .item-toggle--hover:hover {
    // background-color: ${get('colors.treeViewItem.chevron.hoverBg')};
  }

  .item-toggle--end {
    // border-top-left-radius: ${get('radii.2')};
    // border-bottom-left-radius: ${get('radii.2')};
  }

  .item-content {
    grid-area: content;
    display: flex;
    align-items: center;
    height: 100%;
    color: var(--control-fgColor-rest, var(--color-fg-default));
    text-decoration: none;
    // padding: 0 ${get('space.2')};
    // gap: ${get('space.2')};
  }

  .item-content-text {
    /* Truncate text label */
    flex: 1 1 auto;
    width: 0;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .item-visual {
    display: flex;
    color: var(--color-fg-muted);
  }

  .item-level-line {
    width: 100%;
    height: 100%;
    border-right: 1px solid;

    /*
     * On devices without hover, the nesting indicator lines
     * appear at all times.
     */
    // border-color: ${get('colors.border.subtle')};
  }

  /*
   * On devices with :hover support, the nesting indicator lines
   * fade in when the user mouses over the entire component,
   * or when there's focus inside the component. This makes
   * sure the component remains simple when not in use.
   */
  @media (hover: hover) {
    .item-level-line {
      border-color: transparent;
    }

    &:hover .item-level-line,
    &:focus-within .item-level-line {
      // border-color: ${get('colors.border.subtle')};
    }
  }

  .directory-icon {
    display: grid;
    // color: ${get('colors.treeViewItem.directory.fill')};
  }

  .visuallyHidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}
